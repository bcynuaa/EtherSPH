
@inproceedings{dierke_installation_2014,
	address = {Atlanta, GA},
	title = {Installation {Effects} of a {Propeller} {Mounted} on a {Wing} with {Coanda} {Flap}. {Part} {II}: {Numerical} {Investigation} and {Experimental} {Validation}},
	isbn = {978-1-62410-285-1},
	shorttitle = {Installation {Effects} of a {Propeller} {Mounted} on a {Wing} with {Coanda} {Flap}. {Part} {II}},
	url = {https://arc.aiaa.org/doi/10.2514/6.2014-3189},
	doi = {10.2514/6.2014-3189},
	language = {en},
	urldate = {2022-12-26},
	booktitle = {20th {AIAA}/{CEAS} {Aeroacoustics} {Conference}},
	publisher = {American Institute of Aeronautics and Astronautics},
	author = {Dierke, Juergen and Akkermans, Rinie A. and Delfs, Jan and Ewert, Roland},
	month = jun,
	year = {2014},
	file = {已接受版本:C\:\\Zotero\\storage\\TVNGBEYH\\Dierke 等 - 2014 - Installation Effects of a Propeller Mounted on a W.pdf:application/pdf},
}

@inproceedings{dierke_installation_2014-1,
	address = {Atlanta, GA},
	title = {Installation {Effects} of a {Propeller} {Mounted} on a {Wing} with {Coanda} {Flap}. {Part} {II}: {Numerical} {Investigation} and {Experimental} {Validation}},
	isbn = {978-1-62410-285-1},
	shorttitle = {Installation {Effects} of a {Propeller} {Mounted} on a {Wing} with {Coanda} {Flap}. {Part} {II}},
	url = {https://arc.aiaa.org/doi/10.2514/6.2014-3189},
	doi = {10.2514/6.2014-3189},
	language = {en},
	urldate = {2022-12-26},
	booktitle = {20th {AIAA}/{CEAS} {Aeroacoustics} {Conference}},
	publisher = {American Institute of Aeronautics and Astronautics},
	author = {Dierke, Juergen and Akkermans, Rinie A. and Delfs, Jan and Ewert, Roland},
	month = jun,
	year = {2014},
	file = {已接受版本:C\:\\Zotero\\storage\\DKVN273U\\Dierke 等 - 2014 - Installation Effects of a Propeller Mounted on a W.pdf:application/pdf;dierke2014.pdf:C\:\\Reference\\多孔吸声材料\\dierke2014.pdf:application/pdf},
}

@book{zwikker_sound_1949,
	address = {New York},
	title = {Sound absorbing materials},
	url = {https://catalog.hathitrust.org/Record/001479870},
	urldate = {2022-12-26},
	publisher = {Elsevier Pub. Co.},
	author = {Zwikker, C. and Kosten, Cornelis Willem},
	year = {1949},
	keywords = {Absorption of sound, Sound, Transmission},
}

@article{__2007,
	title = {多孔吸声材料发展现状与展望},
	url = {https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CPFD&dbname=CPFD9908&filename=GNCL200711010009&uniplatform=NZKPT&v=khJFpMDsFMi2JK5oAQCvPnLYAxJ9zvdXuM4LTz9CIgcQSI2Wu0uvCYj0LVHSUKHEYHVZmCDUHdk%3d},
	abstract = {吸声降噪在人们日常生活、设备安全以及军事领域具有重要意义,多孔材料是一类重要的吸声材料．介绍了多孔材料的吸声原理、多孔吸声材料的种类及其特性、影响多孔吸声材料吸声性能的因素等．综述了多孔吸声材料的发展现状,并对吸声材料的发展趋势做了展望．},
	language = {中文;},
	urldate = {2022-12-26},
	journal = {第六届中国功能材料及其应用学术会议论文集（10）},
	author = {{朱纪磊} and {汤慧萍} and {葛渊} and {李程} and {廖际常}},
	year = {2007},
	note = {Place: 中国湖北武汉
Publisher: 重庆仪器材料研究所、中国仪器仪表学会仪表材料分会、国家仪表功能材料工程技术研究中心},
	keywords = {多孔材料, 多孔纤维材料, 泡沫金属, 吸声材料},
	pages = {33--36},
	file = {12364063.pdf:C\:\\Zotero\\storage\\LYVTF95N\\12364063.pdf:application/pdf},
}

@article{__2022,
	title = {吸声材料的研究进展},
	issn = {1006-5377},
	url = {https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFDLAST2022&filename=ZHBY202206011&uniplatform=NZKPT&v=u5KUpgKX6b6tO0couw2eciyKZkMVlMABiXEOqTWBe6Dj-d4AOmWTFA1iNJ4K3xXX},
	abstract = {文章介绍了多孔吸声材料、共振吸声结构、复合吸声结构等吸声材料的研究进展，并指出开发新型环保的吸声材料已成为治理噪声污染的一项重要任务。},
	language = {中文;},
	number = {06},
	urldate = {2022-12-24},
	journal = {中国环保产业},
	author = {{盖晓玲} and {朱亦丹} and {赵佳美} and {吴瑞}},
	year = {2022},
	keywords = {吸声材料, 研究进展, 噪声污染, noise pollution, research progress, sound absorbing material},
	pages = {43--46},
	file = {吸声材料的研究进展_盖晓玲.pdf:C\:\\Reference\\多孔吸声材料\\吸声材料的研究进展_盖晓玲.pdf:application/pdf},
}

@article{__2022-1,
	title = {多孔泡沫吸声材料微结构对声学特性的影响分析},
	volume = {42},
	issn = {1006-1355},
	url = {https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFDAUTO&filename=ZSZK202206011&uniplatform=NZKPT&v=Bk2CuE46Ach7ukePZOnS2rjfhL2o7US35X0AzfaEu0yl5J4ZISzrmBUVBLd3VgW5},
	abstract = {聚氨酯吸声材料是常用的多孔泡沫吸声材料，其吸声性能与微结构存在密切联系。采用周期性胞元结构的双参数半唯象模型预测高孔隙率聚氨酯泡沫材料的宏观声学参数，基于等效流体模型分析低、中和高频段下泡沫材料的吸声系数。采用响应面优化法分析胞径和网状率对材料吸声系数的综合影响，根据胞径和网状率得到所预测材料吸声系数的回归方程。结果表明：对于具有刚性框架和孔隙率较高的多孔泡沫材料，利用预测模型实现了特定的厚度下其微结构最佳的吸声性能。},
	language = {中文;},
	number = {06},
	urldate = {2022-12-24},
	journal = {噪声与振动控制},
	author = {{李玉} and {温华兵} and {赵震宇} and {魏海婴} and {朱庭国}},
	year = {2022},
	keywords = {多孔吸声材料, 声学, 微结构, 吸声系数, 响应面优化, acoustics, microstructure, porous sound-absorbing material, response surface optimization, sound absorption coefficient},
	pages = {66--72},
	file = {多孔泡沫吸声材料微结构对声学特性的影响分析_李玉.pdf:C\:\\Reference\\多孔吸声材料\\多孔泡沫吸声材料微结构对声学特性的影响分析_李玉.pdf:application/pdf},
}

@inproceedings{salomons_eulerian_2002,
	title = {Eulerian {Time}-{Domain} {Model} for {Sound} {Propagation} over a {Finite}-{Impedance} {Ground} {Surface}. {Comparison} with {Frequency}-{Domain} {Models}},
	url = {https://www.semanticscholar.org/paper/Eulerian-Time-Domain-Model-for-Sound-Propagation-a-Salomons-Blumrich/343db6c253cc52935206ae01ba920357f3cc6c84},
	abstract = {Semantic Scholar extracted view of "Eulerian Time-Domain Model for Sound Propagation over a Finite-Impedance Ground Surface. Comparison with Frequency-Domain Models" by E. Salomons et al.},
	urldate = {2022-12-23},
	author = {Salomons, E. and Blumrich, R. and Heimann, D.},
	year = {2002},
	file = {Eulerian Time-Domain Model for Sound Propagation over a Finite-Impedance Ground Surface. Comparison with Frequency-Domain Models:C\:\\Zotero\\storage\\RAIZ2ZYJ\\ChlQZXJpb2RpY2FsRU5HTmV3UzIwMjIxMTE2EiBiMGZjYTQ1NTA1OTc0YzQ3YmI2ZDIwOWFkMmZlYmE2MxoIdTVsZTljODc.html:text/html;Eulerian_Time-Domain_Model_for_Sound_Propagation_o.pdf:C\:\\Reference\\多孔吸声材料\\Eulerian_Time-Domain_Model_for_Sound_Propagation_o.pdf:application/pdf},
}

@misc{noauthor_pdf_nodate,
	title = {({PDF}) {Eulerian} {Time}-{Domain} {Model} for {Sound} {Propagation} over a {Finite}-{Impedance} {Ground} {Surface}. {Comparison} with {Frequency}-{Domain} {Models}},
	url = {https://www.researchgate.net/publication/224780019_Eulerian_Time-Domain_Model_for_Sound_Propagation_over_a_Finite-Impedance_Ground_Surface_Comparison_with_Frequency-Domain_Models},
	urldate = {2022-12-23},
	file = {(PDF) Eulerian Time-Domain Model for Sound Propagation over a Finite-Impedance Ground Surface. Comparison with Frequency-Domain Models:C\:\\Zotero\\storage\\G8J74JLT\\224780019_Eulerian_Time-Domain_Model_for_Sound_Propagation_over_a_Finite-Impedance_Ground_Surfa.html:text/html},
}

@article{_navier-stokesgalerkin_2010,
	title = {Navier-{Stokes方程间断Galerkin有限元方法研究}},
	volume = {42},
	issn = {0459-1879},
	url = {https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFD2010&filename=LXXB201005022&uniplatform=NZKPT&v=xGNOEK49uwqJuFurIZOeT4auNHMxgQYJV6VLmEDNiLq7HLCeok3Fnlqks8z7LvHf},
	abstract = {通过引入全局提升算子和局部提升算子,发展了求解Navier-Stokes方程的间断Galerkin(discontinuousGalerkin,DG)有限元方法的一般框架,并在此框架下给出了几种典型黏性离散格式的具体表达形式.对局部提升算子的求解给出了详细的计算步骤.同时还给出了一种简单有效的计算方法来对物面边界进行高阶近似.为了能够对NS方程进行精度测试,采用对原始系统添加源项的方法构造精确解.二维Euler和NS系统的精度测试表明该方法达到了DG方法的理论精度.二维圆柱无黏绕流的计算结果表明关于物面边界的高阶近似方法能够保持DG方法原有的精度.卡门涡街数值模拟则进一步验证了该方法的正确性并...},
	language = {中文;},
	number = {05},
	urldate = {2022-12-23},
	journal = {力学学报},
	author = {{于剑} and {阎超}},
	year = {2010},
	keywords = {计算流体力学, 间断Galerkin有限元方法, 黏性项, computional fluid dynamics, discontinuous Galerkin finite element method, Navier-Stokes equations, Navier-Stokes方程, viscous term},
	pages = {962--970},
	file = {Navier-Stokes...lerkin有限元方法研究_于剑.pdf:C\:\\Reference\\多孔吸声材料\\Navier-Stokes...lerkin有限元方法研究_于剑.pdf:application/pdf},
}

@phdthesis{__2010,
	type = {博士},
	title = {可压缩流体计算中的浸入边界方法及其应用},
	url = {https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CDFD&dbname=CDFD1214&filename=1011291507.nh&uniplatform=NZKPT&v=TceQ33mRAUQB5aELLWd-kaAYUddXxBafEakyOkF2T_3p-zAPq6q4UDnW_FPOCASf},
	abstract = {在复杂流体模拟中,浸入边界方法能够简化网格生成过程,减小多尺度几何模拟困难,方便模拟运动物体,提高传统贴体网格代码的可复用性等特点,是如今国内外重点研究与广泛应用的方法之一。针对复杂可压缩流的模拟,目前浸入边界方法研究的关键工作主要包括可压缩流浸入边界条件的构造及边界重构方法,自适应加密技术,笛卡尔网格以外的网格系统比如非结构网格浸入边界方法的使用,高雷诺数粘性流模拟,运动物体模拟等。本论文针对复杂流体问题,分别研究了Euler方程自适应笛卡尔网格虚拟单元浸入边界方法;为了提高边界重构精度,研究了Navier-Stokes方程基于径向基函数的浸入边界方法;为了克服完全笛卡尔网格方法对有些复杂几...},
	language = {中文;},
	urldate = {2022-12-23},
	school = {南京航空航天大学},
	author = {{刘剑明}},
	year = {2010},
	keywords = {非结构网格, 浸入边界方法, 可压缩流, 流动控制, 自适应笛卡尔网格, Adaptive Cartesian Grids, Compressible Flow, Flow Control, Immersed Boundary Method, Unstructured Grids},
	file = {可压缩流体计算中的浸入边界方法及其应用_刘剑明.caj:C\:\\Reference\\多孔吸声材料\\可压缩流体计算中的浸入边界方法及其应用_刘剑明.caj:application/caj},
}

@article{_galerkin_2007,
	title = {{间断Galerkin有限元和有限体积混合计算方法研究}},
	issn = {0459-1879},
	url = {https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFD2007&filename=LXXB200701003&uniplatform=NZKPT&v=_74cQP1OmXb5U11bk4PEaD8yQmPMVRQPQoQVoCvzC9d33V_PuJWKZwndDwp3-yB_},
	abstract = {通过局部坐标变换而建立的非正交单元间断Galerkin(DG)有限元计算方法计算精度高,但计算量大、内存需求大;而非结构网格有限体积方法虽然准确计算热流的问题目前还没有完全解决,但其具有计算速度快和内存需求小的优点．该研究是将有限元和有限体积方法的优点结合,发展有限元和有限体积的混合方法．在物面附近黏性占主导作用的区域内采用有限元方法进行计算,在远离物而的区域采用快速的有限体积方法进行计算,在有限元和有限体积方法结合处要保证通量守恒．通过算例说明有限元和有限体积混合方法既能保证黏性区域的热流计算精度和流场结构的分辨率,又能降低内存需求和提高计算效率,使有限元方法应用于复杂外形(实际工程问题)的...},
	language = {中文;},
	number = {01},
	urldate = {2022-12-23},
	journal = {力学学报},
	author = {{贺立新} and {张来平} and {张涵信}},
	year = {2007},
	keywords = {discontinuous Galerkin finite element method, 间断Galerkin有限元, 有限体积方法, 有限元和有限体积混合方法, FE/FV mixed method, finite volume method},
	pages = {15--22},
	file = {间断Galerkin有限元和有限体积混合计算方法研究_贺立新.pdf:C\:\\Reference\\多孔吸声材料\\间断Galerkin有限元和有限体积混合计算方法研究_贺立新.pdf:application/pdf},
}

@misc{noauthor_galerkin_nodate,
	title = {{间断Galerkin有限元和有限体积混合计算方法研究} - 中国知网},
	url = {https://x.nuaa.edu.cn/https/77726476706e69737468656265737421fbf952d2243e635930068cb8/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFD2007&filename=LXXB200701003&uniplatform=NZKPT&v=_74cQP1OmXb5U11bk4PEaD8yQmPMVRQPQoQVoCvzC9d33V_PuJWKZ5ZDjlGKqcK3},
	urldate = {2022-12-23},
	file = {间断Galerkin有限元和有限体积混合计算方法研究 - 中国知网:C\:\\Zotero\\storage\\VJEKFTBR\\detail.html:text/html},
}

@article{__2016,
	title = {基于指数插值的浸没边界法在可压缩流模拟中的应用研究},
	volume = {34},
	issn = {0258-1825},
	url = {https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFDLAST2016&filename=KQDX201604003&uniplatform=NZKPT&v=r9cfRUEgsVd9BRXRWKkc18QJqPICyzXOGhVBJhCJmiNotKObkcucOkbo19cPEY6y},
	abstract = {由于浸没边界法在处理复杂外形和动态问题时具有极强的灵活性和便利性,因而受到广泛的关注。在当前浸没边界法的研究和应用中,主要工作集中在关于中/低雷诺数和不可压流动的模拟。本文引入Choi等提出的指数插值法对目标点速度进行插值,并根据多项式插值和Crocce-Busemann关系式等确定目标点压力和温度,并借鉴直角网格法中的虚拟网格法计算物面内的流动变量,建立了适用于可压缩流动的浸没边界法。通过亚、跨声速段翼型绕流和超声速圆柱绕流算例对方法进行验证,结果显示在k值取值合适时模拟结果与实验数据较为吻合。通过对相关算例网格收敛性分析,证明了本文发展的浸没边界法具有较高的精度。文中各算例的模拟结果表明,...},
	language = {中文;},
	number = {04},
	urldate = {2022-12-23},
	journal = {空气动力学学报},
	author = {{何跃龙} and {李盾} and {刘帅} and {马汉东}},
	year = {2016},
	keywords = {浸没边界法, 可压缩流动, 虚拟网格法, 直接力法, 指数插值, compressible flow, direct force, ghost cell method, immersed boundary, power-law interpolation},
	pages = {426--432},
	file = {基于指数插值的浸没边界法在可压缩流模拟中的应用研究_何跃龙.pdf:C\:\\Reference\\多孔吸声材料\\基于指数插值的浸没边界法在可压缩流模拟中的应用研究_何跃龙.pdf:application/pdf},
}

@article{cotte_time-domain_2009,
	title = {Time-domain simulations of sound propagation in a stratified atmosphere over an impedance ground},
	volume = {125},
	issn = {0001-4966},
	url = {http://asa.scitation.org/doi/10.1121/1.3104633},
	doi = {10.1121/1.3104633},
	language = {en},
	number = {5},
	urldate = {2022-12-23},
	journal = {The Journal of the Acoustical Society of America},
	author = {Cotté, Benjamin and Blanc-Benon, Philippe},
	month = may,
	year = {2009},
	pages = {EL202--EL207},
}

@article{__2010-1,
	title = {飞机机体气动噪声计算方法综述},
	volume = {1},
	issn = {1674-8190},
	url = {https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFD2010&filename=HKGC201002008&uniplatform=NZKPT&v=poJXEdpEeM1fNxExzq95i_vmFTzRTRIYEJLXqZTHDXc3kp30f0k7BryZEhUDCKLV},
	doi = {10.16615/j.cnki.1674-8190.2010.02.018},
	abstract = {随着发动机噪声的不断降低,机体气动噪声的影响越来越显著。特别是飞机在进场着陆状态下,增升装置、起落架等已成为最重要的噪声源。长期以来,国外在飞机气动噪声研究方面开展了大量的理论分析、实验研究与数值计算工作,取得了大量的研究成果。尤其是近年来,随着计算流体力学和气动噪声计算方法的日趋成熟,数值计算正在成为飞机气动噪声计算的主要工具,而国内这方面的研究相对滞后。本文针对这种现状试图从气动噪声的基本理论出发,对飞机气动噪声计算方法和已有研究成果等方面进行较全面的介绍,希望能为我国大飞机研制的噪声问题提供一定的参考。},
	language = {中文;},
	number = {02},
	urldate = {2022-12-23},
	journal = {航空工程进展},
	author = {{宋文萍} and {余雷} and {韩忠华}},
	year = {2010},
	keywords = {气动噪声, 噪声计算, 综述, airframe noise, noise prediction, review},
	pages = {125--131},
	file = {飞机机体气动噪声计算方法综述_宋文萍.pdf:C\:\\Zotero\\storage\\5AEKVGUD\\飞机机体气动噪声计算方法综述_宋文萍.pdf:application/pdf},
}

@article{__2018,
	title = {大型客机增升装置噪声机理与噪声控制综述},
	volume = {36},
	issn = {0258-1825},
	url = {https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFDLAST2018&filename=KQDX201803003&uniplatform=NZKPT&v=85EJCBoLo0kJp_xSTfXhYXzqWCY6RJeCcXEyrOJIZefl62YVYIp7FoFNpYx4SOxc},
	abstract = {增升装置噪声是大型客机起降阶段总体噪声水平的重要组成部分。本文综述分析了增升装置噪声机理与噪声控制方法,指出了当前增升装置噪声研究中存在的几个关键难题。开展了高可靠性大涡模拟数值计算,利用相平均、本征正交分解、动态模态分解和相关性分析等方法,对缝翼噪声、襟翼尾缘噪声和襟翼侧缘噪声机理进行了深入研究,增强了对增升装置噪声机理的认识,研究结果有助于指导高效噪声控制方法设计。},
	language = {中文;},
	number = {03},
	urldate = {2022-12-23},
	journal = {空气动力学学报},
	author = {{李伟鹏}},
	year = {2018},
	keywords = {噪声机理, 噪声控制, 增升装置噪声, high-lift device noise, noise control methods, noise generation mechanism},
	pages = {372--384+409},
	file = {大型客机增升装置噪声机理与噪声控制综述_李伟鹏.pdf:C\:\\Reference\\多孔吸声材料\\大型客机增升装置噪声机理与噪声控制综述_李伟鹏.pdf:application/pdf},
}

@article{bassi_high-order_1997,
	title = {High-{Order} {Accurate} {Discontinuous} {Finite} {Element} {Solution} of the {2D} {Euler} {Equations}},
	volume = {138},
	issn = {00219991},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0021999197954541},
	doi = {10.1006/jcph.1997.5454},
	language = {en},
	number = {2},
	urldate = {2022-12-20},
	journal = {Journal of Computational Physics},
	author = {Bassi, F. and Rebay, S.},
	month = dec,
	year = {1997},
	pages = {251--285},
}

@misc{noauthor_galerkin_nodate-1,
	title = {{间断Galerkin有限元和有限体积混合计算方法研究} - 中国知网},
	url = {https://x.nuaa.edu.cn/https/77726476706e69737468656265737421fbf952d2243e635930068cb8/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFD2007&filename=LXXB200701003&uniplatform=NZKPT&v=_74cQP1OmXb5U11bk4PEaD8yQmPMVRQPQoQVoCvzC9fARP3c2ijwUdgVTmyDM6WG},
	urldate = {2022-12-20},
	file = {间断Galerkin有限元和有限体积混合计算方法研究 - 中国知网:C\:\\Zotero\\storage\\JPQAWQ9I\\detail.html:text/html},
}

@misc{noauthor_navier-stokesgalerkin_nodate,
	title = {Navier-{Stokes方程间断Galerkin有限元方法研究} - 中国知网},
	url = {https://x.nuaa.edu.cn/https/77726476706e69737468656265737421fbf952d2243e635930068cb8/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFD2010&filename=LXXB201005022&uniplatform=NZKPT&v=xGNOEK49uwqJuFurIZOeT4auNHMxgQYJV6VLmEDNiLoGA1Y84cz6a-hFTRA7_zMI},
	urldate = {2022-12-20},
	file = {Navier-Stokes方程间断Galerkin有限元方法研究 - 中国知网:C\:\\Zotero\\storage\\AW2EW75Q\\detail.html:text/html},
}

@article{lu_high-order_2005,
	title = {High-order discontinuous {Galerkin} method for elastohydrodynamic lubrication line contact problems},
	volume = {21},
	issn = {10698299},
	url = {https://onlinelibrary.wiley.com/doi/10.1002/cnm.781},
	doi = {10.1002/cnm.781},
	language = {en},
	number = {11},
	urldate = {2022-12-20},
	journal = {Communications in Numerical Methods in Engineering},
	author = {Lu, H. and Berzins, M. and Goodyer, C. E. and Jimack, P. K.},
	month = jun,
	year = {2005},
	pages = {643--650},
	file = {全文:C\:\\Zotero\\storage\\MUM7D4P7\\Lu 等 - 2005 - High-order discontinuous Galerkin method for elast.pdf:application/pdf;lu2005.pdf:C\:\\Reference\\多孔吸声材料\\lu2005.pdf:application/pdf},
}

@incollection{griebel_development_2000,
	address = {Berlin, Heidelberg},
	title = {The {Development} of {Discontinuous} {Galerkin} {Methods}},
	volume = {11},
	isbn = {978-3-642-64098-8 978-3-642-59721-3},
	url = {http://link.springer.com/10.1007/978-3-642-59721-3_1},
	urldate = {2022-12-20},
	booktitle = {Discontinuous {Galerkin} {Methods}},
	publisher = {Springer Berlin Heidelberg},
	author = {Cockburn, Bernardo and Karniadakis, George E. and Shu, Chi-Wang},
	editor = {Griebel, M. and Keyes, D. E. and Nieminen, R. M. and Roose, D. and Schlick, T. and Cockburn, Bernardo and Karniadakis, George E. and Shu, Chi-Wang},
	year = {2000},
	doi = {10.1007/978-3-642-59721-3_1},
	note = {Series Title: Lecture Notes in Computational Science and Engineering},
	pages = {3--50},
	file = {全文:C\:\\Zotero\\storage\\CW58BD7Q\\Cockburn 等 - 2000 - The Development of Discontinuous Galerkin Methods.pdf:application/pdf;cockburn2000.pdf:C\:\\Reference\\多孔吸声材料\\cockburn2000.pdf:application/pdf},
}

@article{johnson_analysis_1986,
	title = {An analysis of the discontinuous {Galerkin} method for a scalar hyperbolic equation},
	volume = {46},
	issn = {0025-5718, 1088-6842},
	url = {https://www.ams.org/mcom/1986-46-173/S0025-5718-1986-0815828-4/},
	doi = {10.1090/S0025-5718-1986-0815828-4},
	abstract = {We prove
              
                
                  
                    
                      
                        L
                        p
                      
                    
                    \{L\_p\}
                  
                
              
              stability and error estimates for the discontinuous Galerkin method when applied to a scalar linear hyperbolic equation on a convex polygonal plane domain. Using finite element analysis techniques, we obtain
              
                
                  
                    
                      
                        L
                        2
                      
                    
                    \{L\_2\}
                  
                
              
              estimates that are valid on an arbitrary locally regular triangulation of the domain and for an arbitrary degree of polynomials.
              
                
                  
                    
                      
                        L
                        p
                      
                    
                    \{L\_p\}
                  
                
              
              estimates for
              
                
                  
                    
                      p
                      
                        ≠
                        
                      
                      2
                    
                    p {\textbackslash}ne 2
                  
                
              
              are restricted to either a uniform or piecewise uniform triangulation and to polynomials of not higher than first degree. The latter estimates are proved by combining finite difference and finite element analysis techniques.},
	language = {en},
	number = {173},
	urldate = {2022-12-20},
	journal = {Mathematics of Computation},
	author = {Johnson, C. and Pitkäranta, J.},
	year = {1986},
	pages = {1--26},
	file = {全文:C\:\\Zotero\\storage\\S8DHXTJH\\Johnson 和 Pitkäranta - 1986 - An analysis of the discontinuous Galerkin method f.pdf:application/pdf;johnson1986.pdf:C\:\\Reference\\多孔吸声材料\\johnson1986.pdf:application/pdf},
}

@incollection{lasaint_finite_1974,
	title = {On a {Finite} {Element} {Method} for {Solving} the {Neutron} {Transport} {Equation}},
	isbn = {978-0-12-208350-1},
	url = {https://linkinghub.elsevier.com/retrieve/pii/B978012208350150008X},
	language = {en},
	urldate = {2022-12-20},
	booktitle = {Mathematical {Aspects} of {Finite} {Elements} in {Partial} {Differential} {Equations}},
	publisher = {Elsevier},
	author = {Lasaint, P. and Raviart, P.A.},
	year = {1974},
	doi = {10.1016/B978-0-12-208350-1.50008-X},
	pages = {89--123},
	file = {6a43bbeea09fdf662a944edb5a152b0d.pdf:C\:\\Reference\\多孔吸声材料\\6a43bbeea09fdf662a944edb5a152b0d.pdf:application/pdf},
}

@techreport{reed_triangular_1973,
	title = {Triangular mesh methods for the neutron transport equation},
	url = {https://www.osti.gov/biblio/4491151},
	abstract = {The U.S. Department of Energy's Office of Scientific and Technical Information},
	language = {English},
	number = {LA-UR-73-479; CONF-730414-2},
	urldate = {2022-12-20},
	institution = {Los Alamos Scientific Lab., N.Mex. (USA)},
	author = {Reed, W. H. and Hill, T. R.},
	month = oct,
	year = {1973},
	file = {4491151.pdf:C\:\\Zotero\\storage\\XR2HDDSL\\4491151.pdf:application/pdf;Full Text PDF:C\:\\Zotero\\storage\\V4D8XGTF\\Reed 和 Hill - 1973 - Triangular mesh methods for the neutron transport .pdf:application/pdf},
}

@misc{noauthor__nodate,
	title = {基于指数插值的浸没边界法在可压缩流模拟中的应用研究 - 中国知网},
	url = {https://x.nuaa.edu.cn/https/77726476706e69737468656265737421fbf952d2243e635930068cb8/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFDLAST2016&filename=KQDX201604003&uniplatform=NZKPT&v=r9cfRUEgsVd9BRXRWKkc18QJqPICyzXOGhVBJhCJmiNVD_Vn4SticY1tIGWcPr2v},
	urldate = {2022-12-20},
	file = {基于指数插值的浸没边界法在可压缩流模拟中的应用研究 - 中国知网:C\:\\Zotero\\storage\\MAEY6CZB\\detail.html:text/html},
}

@misc{noauthor__nodate-1,
	title = {可压缩流体计算中的浸入边界方法及其应用 - 中国知网},
	url = {https://x.nuaa.edu.cn/https/77726476706e69737468656265737421fbf952d2243e635930068cb8/kcms/detail/detail.aspx?dbcode=CDFD&dbname=CDFD1214&filename=1011291507.nh&uniplatform=NZKPT&v=TceQ33mRAUQB5aELLWd-kaAYUddXxBafEakyOkF2T_0ck0eLgfjrNakcn972hYTC},
	urldate = {2022-12-20},
	file = {可压缩流体计算中的浸入边界方法及其应用 - 中国知网:C\:\\Zotero\\storage\\JB7GQ2H2\\detail.html:text/html},
}

@article{kim_immersed-boundary_2001,
	title = {An {Immersed}-{Boundary} {Finite}-{Volume} {Method} for {Simulations} of {Flow} in {Complex} {Geometries}},
	volume = {171},
	issn = {00219991},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0021999101967786},
	doi = {10.1006/jcph.2001.6778},
	language = {en},
	number = {1},
	urldate = {2022-12-20},
	journal = {Journal of Computational Physics},
	author = {Kim, Jungwoo and Kim, Dongjoo and Choi, Haecheon},
	month = jul,
	year = {2001},
	pages = {132--150},
	file = {kim2001.pdf:C\:\\Reference\\多孔吸声材料\\kim2001.pdf:application/pdf},
}

@article{fadlun_combined_2000,
	title = {Combined {Immersed}-{Boundary} {Finite}-{Difference} {Methods} for {Three}-{Dimensional} {Complex} {Flow} {Simulations}},
	volume = {161},
	issn = {00219991},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0021999100964842},
	doi = {10.1006/jcph.2000.6484},
	language = {en},
	number = {1},
	urldate = {2022-12-20},
	journal = {Journal of Computational Physics},
	author = {Fadlun, E.A. and Verzicco, R. and Orlandi, P. and Mohd-Yusof, J.},
	month = jun,
	year = {2000},
	pages = {35--60},
	file = {fadlun2000.pdf:C\:\\Reference\\多孔吸声材料\\fadlun2000.pdf:application/pdf},
}

@article{mohd-yusof_combined_1997,
	title = {Combined immersed-boundary/{B}-spline methods for simulations of flow in complex geometries},
	journal = {CTR Annual Research Briefs},
	author = {Mohd-Yusof, J.},
	month = jan,
	year = {1997},
	pages = {317--327},
	file = {myusof.pdf:C\:\\Zotero\\storage\\TEAJRDEZ\\myusof.pdf:application/pdf},
}

@article{peskin_flow_1972,
	title = {Flow patterns around heart valves: {A} numerical method},
	volume = {10},
	issn = {00219991},
	shorttitle = {Flow patterns around heart valves},
	url = {https://linkinghub.elsevier.com/retrieve/pii/0021999172900654},
	doi = {10.1016/0021-9991(72)90065-4},
	language = {en},
	number = {2},
	urldate = {2022-12-20},
	journal = {Journal of Computational Physics},
	author = {Peskin, Charles S},
	month = oct,
	year = {1972},
	pages = {252--271},
	file = {peskin1972.pdf:C\:\\Reference\\多孔吸声材料\\peskin1972.pdf:application/pdf},
}

@article{fung_impedance_2000,
	title = {Impedance and {Its} {Time}-{Domain} {Extensions}},
	volume = {38},
	issn = {0001-1452, 1533-385X},
	url = {https://arc.aiaa.org/doi/10.2514/2.950},
	doi = {10.2514/2.950},
	language = {en},
	number = {1},
	urldate = {2022-12-20},
	journal = {AIAA Journal},
	author = {Fung, K.-Y. and Ju, Hongbin and Tallapragada, BhanuPrakash},
	month = jan,
	year = {2000},
	pages = {30--38},
	file = {fung2000.pdf:C\:\\Reference\\多孔吸声材料\\fung2000.pdf:application/pdf},
}

@article{ozyoruk_time-domain_1997,
	title = {A {Time}-{Domain} {Implementation} of {Surface} {Acoustic} {Impedance} {Condition} with and {Without} {Flow}},
	volume = {05},
	issn = {0218-396X, 1793-6489},
	url = {https://www.worldscientific.com/doi/abs/10.1142/S0218396X97000162},
	doi = {10.1142/S0218396X97000162},
	abstract = {The impedance condition in computational aeroacoustic applications is required in order to model acoustically treated walls. The application of this condition in time-domain methods, however, is extremely difficult because of the convolutions involved. In this paper, a time-domain method is developed which overcomes the computational difficulties associated with these convolutions. This method builds on the z-transform from control and signal processing theory and the z-domain model of the impedance. The idea of using the z-domain operations originates from the computational electromagnetics community. When the impedance is expressed in the z-domain with a rational function, the inverse z-transform of the impedance condition results in only infinite impulse response type, digital, recursive filter operations. These operations, unlike convolutions, require only limited past-time knowledge of the acoustic pressures and velocities on the surface. Examples of one- and two-dimensional problems with and without flow indicate that the method promises success in aeroacoustic applications.},
	language = {en},
	number = {03},
	urldate = {2022-12-20},
	journal = {Journal of Computational Acoustics},
	author = {Özyörük, Yusuf and Long, Lyle N.},
	month = sep,
	year = {1997},
	pages = {277--296},
	file = {10.1142@s0218396x97000162.pdf:C\:\\Reference\\多孔吸声材料\\10.1142@s0218396x97000162.pdf:application/pdf},
}

@inproceedings{zheng_application_2002,
	address = {Breckenridge, Colorado},
	title = {Application and {Verification} of {Broadband} {Time} {Domain} {Impedance} {Boundary} {Conditions} in {Multi}-{Dimensional} {Acoustic} {Problems}},
	isbn = {978-1-62410-119-9},
	url = {http://arc.aiaa.org/doi/abs/10.2514/6.2002-2593},
	doi = {10.2514/6.2002-2593},
	language = {en},
	urldate = {2022-12-20},
	booktitle = {8th {AIAA}/{CEAS} {Aeroacoustics} {Conference} \&amp; {Exhibit}},
	publisher = {American Institute of Aeronautics and Astronautics},
	author = {Zheng, Shi and Zhuang, Mei},
	month = jun,
	year = {2002},
	file = {zheng2002.pdf:C\:\\Reference\\多孔吸声材料\\zheng2002.pdf:application/pdf},
}

@article{tam_time-domain_1996,
	title = {Time-domain impedance boundary conditions for computational aeroacoustics},
	volume = {34},
	issn = {0001-1452, 1533-385X},
	url = {https://arc.aiaa.org/doi/10.2514/3.13168},
	doi = {10.2514/3.13168},
	language = {en},
	number = {5},
	urldate = {2022-12-20},
	journal = {AIAA Journal},
	author = {Tam, Christopher K. W. and Auriault, Laurent},
	month = may,
	year = {1996},
	pages = {917--923},
	file = {全文:C\:\\Zotero\\storage\\8THDCUQV\\Tam 和 Auriault - 1996 - Time-domain impedance boundary conditions for comp.pdf:application/pdf;tam1996.pdf:C\:\\Reference\\多孔吸声材料\\tam1996.pdf:application/pdf},
}

@article{tam_time-domain_1996-1,
	title = {Time-domain impedance boundary conditions for computational aeroacoustics},
	volume = {34},
	issn = {0001-1452, 1533-385X},
	url = {https://arc.aiaa.org/doi/10.2514/3.13168},
	doi = {10.2514/3.13168},
	language = {en},
	number = {5},
	urldate = {2022-12-20},
	journal = {AIAA Journal},
	author = {Tam, Christopher K. W. and Auriault, Laurent},
	month = may,
	year = {1996},
	pages = {917--923},
	file = {全文:C\:\\Zotero\\storage\\ILSEQFE7\\Tam 和 Auriault - 1996 - Time-domain impedance boundary conditions for comp.pdf:application/pdf},
}

@article{botteldooren_acoustical_1994,
	title = {Acoustical finite‐difference time‐domain simulation in a quasi‐{Cartesian} grid},
	volume = {95},
	issn = {0001-4966},
	url = {http://asa.scitation.org/doi/10.1121/1.409866},
	doi = {10.1121/1.409866},
	language = {en},
	number = {5},
	urldate = {2022-12-20},
	journal = {The Journal of the Acoustical Society of America},
	author = {Botteldooren, D.},
	month = may,
	year = {1994},
	pages = {2313--2319},
	file = {botteldooren1994.pdf:C\:\\Reference\\多孔吸声材料\\botteldooren1994.pdf:application/pdf},
}

@article{kyung_suk_oh_efficient_1995,
	title = {An efficient implementation of surface impedance boundary conditions for the finite-difference time-domain method},
	volume = {43},
	issn = {0018926X},
	url = {http://ieeexplore.ieee.org/document/391136/},
	doi = {10.1109/8.391136},
	number = {7},
	urldate = {2022-12-20},
	journal = {IEEE Transactions on Antennas and Propagation},
	author = {{Kyung Suk Oh} and Schutt-Aine, J.E.},
	month = jul,
	year = {1995},
	pages = {660--666},
	file = {kyungsukoh1995.pdf:C\:\\Reference\\多孔吸声材料\\kyungsukoh1995.pdf:application/pdf},
}

@article{roden_efficient_1999,
	title = {The efficient implementation of the surface impedance boundary condition in general curvilinear coordinates},
	volume = {47},
	issn = {00189480},
	url = {http://ieeexplore.ieee.org/document/795069/},
	doi = {10.1109/22.795069},
	number = {10},
	urldate = {2022-12-20},
	journal = {IEEE Transactions on Microwave Theory and Techniques},
	author = {Roden, J.A. and Gedney, S.D.},
	month = oct,
	year = {1999},
	pages = {1954--1963},
	file = {roden1999.pdf:C\:\\Reference\\多孔吸声材料\\roden1999.pdf:application/pdf},
}

@article{yee_algorithm_1992,
	title = {An algorithm to implement a surface impedance boundary condition for {FDTD} ({EM} scattering)},
	volume = {40},
	issn = {0018926X},
	url = {http://ieeexplore.ieee.org/document/155749/},
	doi = {10.1109/8.155749},
	number = {7},
	urldate = {2022-12-20},
	journal = {IEEE Transactions on Antennas and Propagation},
	author = {Yee, K.S. and Shlager, K. and Chang, A.H.},
	month = jul,
	year = {1992},
	pages = {833--837},
	file = {yee1992.pdf:C\:\\Reference\\多孔吸声材料\\yee1992.pdf:application/pdf},
}

@article{yee_impedance_1997,
	title = {Impedance boundary condition simulation in the {FDTD}/{FVTD} hybrid},
	volume = {45},
	issn = {0018926X},
	url = {http://ieeexplore.ieee.org/document/585738/},
	doi = {10.1109/8.585738},
	number = {6},
	urldate = {2022-12-20},
	journal = {IEEE Transactions on Antennas and Propagation},
	author = {Yee, K.S. and Chen, J.S.},
	month = jun,
	year = {1997},
	pages = {921--925},
	file = {yee1997.pdf:C\:\\Reference\\多孔吸声材料\\yee1997.pdf:application/pdf},
}

@article{beggs_finite-difference_1992,
	title = {Finite-difference time-domain implementation of surface impedance boundary conditions},
	volume = {40},
	issn = {0018926X},
	url = {http://ieeexplore.ieee.org/document/123352/},
	doi = {10.1109/8.123352},
	number = {1},
	urldate = {2022-12-20},
	journal = {IEEE Transactions on Antennas and Propagation},
	author = {Beggs, J.H. and Luebbers, R.J. and Yee, K.S. and Kunz, K.S.},
	month = jan,
	year = {1992},
	pages = {49--56},
	file = {已提交版本:C\:\\Zotero\\storage\\WJNTX9WH\\Beggs 等 - 1992 - Finite-difference time-domain implementation of su.pdf:application/pdf;beggs1992 (1).pdf:C\:\\Reference\\多孔吸声材料\\beggs1992 (1).pdf:application/pdf},
}

@article{maloney_use_1992,
	title = {The use of surface impedance concepts in the finite-difference time-domain method},
	volume = {40},
	issn = {0018926X},
	url = {http://ieeexplore.ieee.org/document/123351/},
	doi = {10.1109/8.123351},
	number = {1},
	urldate = {2022-12-20},
	journal = {IEEE Transactions on Antennas and Propagation},
	author = {Maloney, J.G. and Smith, G.S.},
	month = jan,
	year = {1992},
	pages = {38--48},
	file = {maloney1992.pdf:C\:\\Reference\\多孔吸声材料\\maloney1992.pdf:application/pdf},
}

@article{beggs_finite-difference_1992-1,
	title = {Finite-difference time-domain implementation of surface impedance boundary conditions},
	volume = {40},
	issn = {0018926X},
	url = {http://ieeexplore.ieee.org/document/123352/},
	doi = {10.1109/8.123352},
	number = {1},
	urldate = {2022-12-20},
	journal = {IEEE Transactions on Antennas and Propagation},
	author = {Beggs, J.H. and Luebbers, R.J. and Yee, K.S. and Kunz, K.S.},
	month = jan,
	year = {1992},
	pages = {49--56},
	file = {已提交版本:C\:\\Zotero\\storage\\MKPBLTSD\\Beggs 等 - 1992 - Finite-difference time-domain implementation of su.pdf:application/pdf;beggs1992.pdf:C\:\\Reference\\多孔吸声材料\\beggs1992.pdf:application/pdf},
}

@inproceedings{maloney_implementation_1990,
	address = {Dallas, TX, USA},
	title = {Implementation of surface impedance concepts in the finite-difference time-domain ({FD}-{TD}) technique},
	url = {http://ieeexplore.ieee.org/document/115430/},
	doi = {10.1109/APS.1990.115430},
	urldate = {2022-12-20},
	booktitle = {International {Symposium} on {Antennas} and {Propagation} {Society}, {Merging} {Technologies} for the 90's},
	publisher = {IEEE},
	author = {Maloney, J.G. and Smith, G.S.},
	year = {1990},
	pages = {1628--1631 vol.4},
	file = {maloney1990.pdf:C\:\\Reference\\多孔吸声材料\\maloney1990.pdf:application/pdf},
}

@article{kirchhoff_ueber_1868,
	title = {Ueber den {Einfluss} der {Wärmeleitung} in einem {Gase} auf die {Schallbewegung}},
	volume = {210},
	issn = {00033804, 15213889},
	url = {https://onlinelibrary.wiley.com/doi/10.1002/andp.18682100602},
	doi = {10.1002/andp.18682100602},
	language = {de},
	number = {6},
	urldate = {2022-12-20},
	journal = {Annalen der Physik und Chemie},
	author = {Kirchhoff, G.},
	year = {1868},
	pages = {177--193},
	file = {kirchhoff1868.pdf:C\:\\Reference\\多孔吸声材料\\kirchhoff1868.pdf:application/pdf},
}

@article{ke_simulation_2015,
	title = {Simulation of sound propagation over porous barriers of arbitrary shapes},
	volume = {137},
	issn = {0001-4966},
	url = {http://asa.scitation.org/doi/10.1121/1.4904553},
	doi = {10.1121/1.4904553},
	language = {en},
	number = {1},
	urldate = {2022-12-20},
	journal = {The Journal of the Acoustical Society of America},
	author = {Ke, Guoyi and Zheng, Z. C.},
	month = jan,
	year = {2015},
	pages = {303--309},
	file = {全文:C\:\\Zotero\\storage\\G7QH6VTX\\Ke 和 Zheng - 2015 - Simulation of sound propagation over porous barrie.pdf:application/pdf},
}

@article{ke_simulation_2015-1,
	title = {Simulation of sound propagation over porous barriers of arbitrary shapes},
	volume = {137},
	issn = {0001-4966},
	url = {http://asa.scitation.org/doi/10.1121/1.4904553},
	doi = {10.1121/1.4904553},
	language = {en},
	number = {1},
	urldate = {2022-12-20},
	journal = {The Journal of the Acoustical Society of America},
	author = {Ke, Guoyi and Zheng, Z. C.},
	month = jan,
	year = {2015},
	pages = {303--309},
	file = {全文:C\:\\Zotero\\storage\\TB9SMSHV\\Ke 和 Zheng - 2015 - Simulation of sound propagation over porous barrie.pdf:application/pdf;ke2015.pdf:C\:\\Reference\\多孔吸声材料\\ke2015.pdf:application/pdf},
}

@misc{noauthor_eulerian_nodate,
	title = {Eulerian {Time}-{Domain} {Model} for {Sound} {Propagation} over a {Finite}-{Impedance} {Ground} {Surface}. {Comparison} with {Frequency}-{Domain} {Models}},
	url = {https://x.nuaa.edu.cn/https/77726476706e69737468656265737421f4b9569d2936695e790c88b8991b203a7c11579c/periodical/ChlQZXJpb2RpY2FsRU5HTmV3UzIwMjIxMTE2EiBiMGZjYTQ1NTA1OTc0YzQ3YmI2ZDIwOWFkMmZlYmE2MxoIdTVsZTljODc%3D},
	urldate = {2022-12-20},
}

@article{wilson_time-domain_2007,
	title = {Time-domain calculations of sound interactions with outdoor ground surfaces},
	volume = {68},
	issn = {0003682X},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0003682X05001556},
	doi = {10.1016/j.apacoust.2005.10.004},
	language = {en},
	number = {2},
	urldate = {2022-12-20},
	journal = {Applied Acoustics},
	author = {Wilson, D. Keith and Ostashev, Vladimir E. and Collier, Sandra L. and Symons, Neill P. and Aldridge, David F. and Marlin, David H.},
	month = feb,
	year = {2007},
	pages = {173--200},
	file = {wilson2007.pdf:C\:\\Reference\\多孔吸声材料\\wilson2007.pdf:application/pdf},
}

@article{sagartzazu_review_2008,
	title = {Review in {Sound} {Absorbing} {Materials}},
	volume = {15},
	issn = {1134-3060, 1886-1784},
	url = {http://link.springer.com/10.1007/s11831-008-9022-1},
	doi = {10.1007/s11831-008-9022-1},
	abstract = {This article is a bibliographical revision concerning acoustic absorbing materials, also known as poroelastics. These absorbing materials are a passive medium use extensively in the industry to reduce noise. This review presents the fundamental parameters that deﬁne each of the parts comprising these materials, as well as current experimental methods used to measure said parameters. Further along, we will analyze the principle models of characterization in order to study the behaviour of poroelastic materials. Given the lack of accuracy of the standing wave method three absorbing materials are characterized using said principle models. A comparison between measurements with the standing wave method and the predicted surface impedance with the models is shown.},
	language = {en},
	number = {3},
	urldate = {2022-12-20},
	journal = {Archives of Computational Methods in Engineering},
	author = {Sagartzazu, X. and Hervella-Nieto, L. and Pagalday, J. M.},
	month = sep,
	year = {2008},
	pages = {311--342},
	file = {Sagartzazu 等 - 2008 - Review in Sound Absorbing Materials.pdf:C\:\\Zotero\\storage\\MVPB4CA7\\Sagartzazu 等 - 2008 - Review in Sound Absorbing Materials.pdf:application/pdf},
}

@article{noauthor_bakerian_1962,
	title = {The {Bakerian} {Lecture}, 1961 {Sound} generated aerodynamically},
	volume = {267},
	issn = {0080-4630, 2053-9169},
	url = {https://royalsocietypublishing.org/doi/10.1098/rspa.1962.0090},
	doi = {10.1098/rspa.1962.0090},
	abstract = {The author’s original theory of sound generated aerodynamically, that is, of sound radiation fields which are by-products of airflows, has been extended and improved by Curie and Ffowcs Williams. It is explained in this lecture fully but simply, and used as a framework for short analyses of our experimental knowledge on pulse-jet noise, hydrodynamic sound generation, aeolian tones, propeller noise, and boundary-layer noise, as well as for a somewhat extensive discussion of the noise of jets, both stationary and in flight. Improved knowledge of space-time correlations in turbulent flow is used to throw new light on the noise radiated by turbulent boundary layers, as well as by jets at the higher Mach numbers. Supersonic bangs and the scattering of both sound and shock waves by turbulence are briefly touched upon. The lecture ends with a discussion of the methods used for the reduction of jet aircraft noise, in the light of our knowledge of its physical basis.},
	language = {en},
	number = {1329},
	urldate = {2022-12-20},
	journal = {Proceedings of the Royal Society of London. Series A. Mathematical and Physical Sciences},
	month = may,
	year = {1962},
	pages = {147--182},
	file = {lighthill1962.pdf:C\:\\Reference\\多孔吸声材料\\lighthill1962.pdf:application/pdf},
}

@article{noauthor_bakerian_1962-1,
	title = {The {Bakerian} {Lecture}, 1961 {Sound} generated aerodynamically},
	volume = {267},
	issn = {0080-4630, 2053-9169},
	url = {https://royalsocietypublishing.org/doi/10.1098/rspa.1962.0090},
	doi = {10.1098/rspa.1962.0090},
	abstract = {The author’s original theory of sound generated aerodynamically, that is, of sound radiation fields which are by-products of airflows, has been extended and improved by Curie and Ffowcs Williams. It is explained in this lecture fully but simply, and used as a framework for short analyses of our experimental knowledge on pulse-jet noise, hydrodynamic sound generation, aeolian tones, propeller noise, and boundary-layer noise, as well as for a somewhat extensive discussion of the noise of jets, both stationary and in flight. Improved knowledge of space-time correlations in turbulent flow is used to throw new light on the noise radiated by turbulent boundary layers, as well as by jets at the higher Mach numbers. Supersonic bangs and the scattering of both sound and shock waves by turbulence are briefly touched upon. The lecture ends with a discussion of the methods used for the reduction of jet aircraft noise, in the light of our knowledge of its physical basis.},
	language = {en},
	number = {1329},
	urldate = {2022-12-20},
	journal = {Proceedings of the Royal Society of London. Series A. Mathematical and Physical Sciences},
	month = may,
	year = {1962},
	pages = {147--182},
}

@misc{noauthor_sound_nodate,
	title = {On {Sound} {Generated} {Aerodynamically}. {I}. {General} {Theory} on {JSTOR}},
	url = {https://www.jstor.org/stable/98943},
	urldate = {2022-12-20},
}

@article{lighthill_bakerian_1962,
	title = {The {Bakerian} {Lecture}, 1961 {Sound} generated aerodynamically},
	volume = {267},
	url = {https://royalsocietypublishing.org/doi/10.1098/rspa.1962.0090},
	doi = {10.1098/rspa.1962.0090},
	abstract = {The author’s original theory of sound generated aerodynamically, that is, of sound radiation fields which are by-products of airflows, has been extended and improved by Curie and Ffowcs Williams. It is explained in this lecture fully but simply, and used as a framework for short analyses of our experimental knowledge on pulse-jet noise, hydrodynamic sound generation, aeolian tones, propeller noise, and boundary-layer noise, as well as for a somewhat extensive discussion of the noise of jets, both stationary and in flight. Improved knowledge of space-time correlations in turbulent flow is used to throw new light on the noise radiated by turbulent boundary layers, as well as by jets at the higher Mach numbers. Supersonic bangs and the scattering of both sound and shock waves by turbulence are briefly touched upon. The lecture ends with a discussion of the methods used for the reduction of jet aircraft noise, in the light of our knowledge of its physical basis.},
	number = {1329},
	urldate = {2022-12-20},
	journal = {Proceedings of the Royal Society of London. Series A. Mathematical and Physical Sciences},
	author = {Lighthill, Michael James},
	month = may,
	year = {1962},
	note = {Publisher: Royal Society},
	pages = {147--182},
}

@article{noauthor__nodate-2,
	title = {飞机机体气动噪声计算方法综述},
}

@misc{noauthor_notitle_nodate,
}

@misc{noauthor__nodate-3,
	title = {大型客机增升装置噪声机理与噪声控制综述 - 中国知网},
	url = {https://x.nuaa.edu.cn/https/77726476706e69737468656265737421fbf952d2243e635930068cb8/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFDLAST2018&filename=KQDX201803003&uniplatform=NZKPT&v=85EJCBoLo0kJp_xSTfXhYXzqWCY6RJeCcXEyrOJIZedz9wRZrEgZuj6p8ZGFFWZj},
	urldate = {2022-12-20},
	file = {大型客机增升装置噪声机理与噪声控制综述 - 中国知网:C\:\\Zotero\\storage\\2SL2GH76\\detail.html:text/html},
}

@article{fu_polynomial_2017,
	title = {A polynomial particle-in-cell method},
	volume = {36},
	issn = {0730-0301, 1557-7368},
	url = {https://dl.acm.org/doi/10.1145/3130800.3130878},
	doi = {10.1145/3130800.3130878},
	abstract = {Recently the Affine Particle-In-Cell (APIC) Method was proposed by Jiang et al.[2015; 2017b] to improve the accuracy of the transfers in Particle-In-Cell (PIC) [Harlow 1964] techniques by augmenting each particle with a locally affine, rather than locally constant description of the velocity. This reduced the dissipation of the original PIC without suffering from the noise present in the historic alternative, Fluid-Implicit-Particle (FLIP) [Brackbill and Ruppel 1986]. We present a generalization of APIC by augmenting each particle with a more general local function. By viewing the grid-to-particle transfer as a linear and angular momentum conserving projection of the particle-wise local grid velocities onto a reduced basis, we greatly improve the energy and vorticity conservation over the original APIC. Furthermore, we show that the cost of the generalized projection is negligible over APIC when using a particular class of local polynomial functions. Lastly, we note that our method retains the filtering property of APIC and PIC and thus has similar robustness to noise.},
	language = {en},
	number = {6},
	urldate = {2022-11-09},
	journal = {ACM Transactions on Graphics},
	author = {Fu, Chuyuan and Guo, Qi and Gast, Theodore and Jiang, Chenfanfu and Teran, Joseph},
	month = nov,
	year = {2017},
	pages = {1--12},
	file = {全文:C\:\\Zotero\\storage\\CQJQYUMZ\\Fu 等 - 2017 - A polynomial particle-in-cell method.pdf:application/pdf},
}

@article{steffen_analysis_2008,
	title = {Analysis and reduction of quadrature errors in the material point method ({MPM})},
	volume = {76},
	issn = {00295981, 10970207},
	url = {https://onlinelibrary.wiley.com/doi/10.1002/nme.2360},
	doi = {10.1002/nme.2360},
	abstract = {The Material Point Method (MPM) has demonstrated itself as a computationally eﬀective particle method for solving solid mechanics problems involving large deformations and/or fragmentation of structures which are sometimes problematic for ﬁnite element methods. However, like most methods which employ mixed Lagrangian (particle) and Eulerian strategies, analysis of the method is not straightforward. The lack of an analysis framework for MPM, as is found in ﬁnite element methods, makes it challenging to explain anomalies found in its employment and makes it diﬃcult to propose methodology improvements with predictable outcomes.},
	language = {en},
	number = {6},
	urldate = {2022-11-09},
	journal = {International Journal for Numerical Methods in Engineering},
	author = {Steffen, Michael and Kirby, Robert M. and Berzins, Martin},
	month = nov,
	year = {2008},
	pages = {922--948},
	file = {Steffen 等 - 2008 - Analysis and reduction of quadrature errors in the.pdf:C\:\\Zotero\\storage\\KC9K5BIZ\\Steffen 等 - 2008 - Analysis and reduction of quadrature errors in the.pdf:application/pdf},
}

@article{steffen_analysis_2008-1,
	title = {Analysis and reduction of quadrature errors in the material point method ({MPM})},
	volume = {76},
	issn = {00295981, 10970207},
	url = {https://onlinelibrary.wiley.com/doi/10.1002/nme.2360},
	doi = {10.1002/nme.2360},
	abstract = {The Material Point Method (MPM) has demonstrated itself as a computationally eﬀective particle method for solving solid mechanics problems involving large deformations and/or fragmentation of structures which are sometimes problematic for ﬁnite element methods. However, like most methods which employ mixed Lagrangian (particle) and Eulerian strategies, analysis of the method is not straightforward. The lack of an analysis framework for MPM, as is found in ﬁnite element methods, makes it challenging to explain anomalies found in its employment and makes it diﬃcult to propose methodology improvements with predictable outcomes.},
	language = {en},
	number = {6},
	urldate = {2022-11-09},
	journal = {International Journal for Numerical Methods in Engineering},
	author = {Steffen, Michael and Kirby, Robert M. and Berzins, Martin},
	month = nov,
	year = {2008},
	pages = {922--948},
	file = {Steffen 等 - 2008 - Analysis and reduction of quadrature errors in the.pdf:C\:\\Zotero\\storage\\37GBPBVE\\Steffen 等 - 2008 - Analysis and reduction of quadrature errors in the.pdf:application/pdf},
}

@misc{noauthor__nodate-4,
	title = {模拟连续介质的物质点法},
	url = {https://zhuanlan.zhihu.com/p/270143871},
	abstract = {The Material Point Method for Simulating Continuum Materials[1] Abstract在图形学中，形变体和流体的物理行为的模拟已经是一个重要的话题。尽管拉格朗日有限元（FEM）被广泛的应用在弹塑固体，但是它通常需要…},
	language = {zh},
	urldate = {2022-11-09},
	journal = {知乎专栏},
}

@article{_sph_nodate,
	title = {{面向多相流模拟的体积通量无散度SPH方法}},
	issn = {1003-9775},
	url = {https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CAPJ&dbname=CAPJLAST&filename=JSJF20221030003&uniplatform=NZKPT&v=VXycRmZfArHEc0LIeS6_ieboGxpIGuWXmlAT5xb_ykr0o6v3H1QRJls_PpvFFit1},
	abstract = {针对高密度比多相流体模拟中存在的相间密度计算误差问题及产生的不合理对流运动模拟效果， 提出一种基于体积通量无散度的隐式流体压强求解方法. 首先， 分析传统多相流模拟方法产生密度近似误差的原因; 其次， 提出“体积-压缩率”的关联计算方式， 构建流体压缩率与压强间的线性关系; 再次， 分别设计恒定体积求解器和体积通量无散度求解器， 以实现多相流模拟过程中流体体积的不可压缩性和速度场的无散度特性. 为验证所提方法性能， 以流体模拟方法DFSPH为对比对象， 分别以模拟效果合理性、数值计算稳定性与收敛性为定性和定量评估指标， 依次开展两相溃坝、热对流等多相流交互实验. 结果表明， 该方法能够实现高效...},
	language = {中文},
	urldate = {2022-11-09},
	journal = {计算机辅助设计与图形学学报},
	author = {{徐衍睿} and {王笑琨} and {班晓娟} and {王佳敏} and {宋重明} and {王勇}},
	keywords = {不可压缩流体, 多相流, 光滑粒子流体动力学, 基于物理的模拟, Incompressible fluid, multiphase flows, Physical simulation, smoothed particle hydrodynamics},
	pages = {1--10},
	file = {Full Text PDF:C\:\\Zotero\\storage\\MQ25UHAI\\徐 等 - 面向多相流模拟的体积通量无散度SPH方法.pdf:application/pdf},
}

@article{__2022-2,
	title = {近场水下爆炸瞬态强非线性流固耦合无网格数值模拟研究},
	volume = {54},
	issn = {0459-1879},
	url = {https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFDLAST2022&filename=LXXB202208011&uniplatform=NZKPT&v=9suQUV6v9ndYpuhI6RAMqy-eWmOrPw3K2YeT_oW6Js1PNBtz4v-Uk8dECd3W7dVO},
	abstract = {近场水下爆炸涉及多相流体的掺杂耦合以及结构的大变形、损伤和断裂等瞬态强非线性现象,传统的网格算法在模拟近场水下爆炸时面临结构网格畸变、多相界面捕捉精度不足等难题,鉴于此,本文建立了完全无网格的近场水下爆炸冲击波和气泡全物理过程瞬态强非线性流固耦合动力学模型.流体采用基于黎曼求解器的光滑粒子流体动力学(SPH)方法求解,结构采用重构核粒子法(RKPM)求解,并基于法向通量边界条件实现流固耦合.为提高SPH对流场间断的求解精度,引入黎曼问题思想并结合MUSCL重构算法,为解决流场粒子体积变化剧烈导致的精度下降问题,应用了自适应粒子分割与合并方法.为模拟水下爆炸对结构造成的损伤断裂,基于退化实体几何...},
	language = {中文;},
	number = {08},
	urldate = {2022-11-09},
	journal = {力学学报},
	author = {{王平平} and {张阿漫} and {彭玉祥} and {孟子飞}},
	year = {2022},
	keywords = {光滑粒子流体动力学, 结构毁伤, 流固耦合, 水下爆炸, 重构核函数粒子法, fluid-structure interaction, reconstructed kernel function particle method, smooth particle hydrodynamics, structural damage, underwater explosion},
	pages = {2194--2209},
	file = {Full Text PDF:C\:\\Zotero\\storage\\L8IPUXM2\\王 等 - 2022 - 近场水下爆炸瞬态强非线性流固耦合无网格数值模拟研究.pdf:application/pdf},
}

@article{yang_numerical_2022,
	title = {Numerical simulation of selective laser melting based {onSPH} method},
	volume = {52},
	issn = {1674-7275},
	url = {https://engine.scichina.com/doi/10.1360/SSPMA-2022-0199},
	doi = {10.1360/SSPMA-2022-0199},
	language = {zh},
	number = {10},
	urldate = {2022-11-02},
	journal = {SCIENTIA SINICA Physica, Mechanica \& Astronomica},
	author = {Yang, PengYing and Zhang, Fan and Huang, Can and Liu, MouBin},
	month = oct,
	year = {2022},
	pages = {104706},
	file = {基于SPH方法的激光选区熔化数值模拟研究_杨朋英.pdf:C\:\\Reference\\MPM_and_SPH\\基于SPH方法的激光选区熔化数值模拟研究_杨朋英.pdf:application/pdf},
}

@article{raymond_strategy_2018,
	title = {A strategy to couple the material point method ({MPM}) and smoothed particle hydrodynamics ({SPH}) computational techniques},
	volume = {5},
	issn = {2196-4378, 2196-4386},
	url = {http://link.springer.com/10.1007/s40571-016-0149-9},
	doi = {10.1007/s40571-016-0149-9},
	abstract = {A strategy is introduced to allow coupling of the material point method (MPM) and smoothed particle hydrodynamics (SPH) for numerical simulations. This new strategy partitions the domain into SPH and MPM regions, particles carry all state variables and as such no special treatment is required for the transition between regions. The aim of this work is to derive and validate the coupling methodology between MPM and SPH. Such coupling allows for general boundary conditions to be used in an SPH simulation without further augmentation. Additionally, as SPH is a purely particle method, and MPM is a combination of particles and a mesh. This coupling also permits a smooth transition from particle methods to mesh methods, where further coupling to mesh methods could in future provide an effective farﬁeld boundary treatment for the SPH method. The coupling technique is introduced and described alongside a number of simulations in 1D and 2D to validate and contextualize the potential of using these two methods in a single simulation. The strategy shown here is capable of fully coupling the two methods without any complicated algorithms to transform information from one method to another.},
	language = {en},
	number = {1},
	urldate = {2022-11-02},
	journal = {Computational Particle Mechanics},
	author = {Raymond, Samuel J. and Jones, Bruce and Williams, John R.},
	month = jan,
	year = {2018},
	pages = {49--58},
	file = {raymond2016.pdf:C\:\\Reference\\MPM_and_SPH\\raymond2016.pdf:application/pdf},
}

@article{puri_comparison_2014,
	title = {A comparison of {SPH} schemes for the compressible {Euler} equations},
	volume = {256},
	issn = {00219991},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0021999113006049},
	doi = {10.1016/j.jcp.2013.08.060},
	abstract = {We review the current state-of-the-art Smoothed Particle Hydrodynamics (SPH) schemes for the compressible Euler equations. We identify three prototypical schemes and apply them to a suite of test problems in one and two dimensions. The schemes are in order, standard SPH with an adaptive density kernel estimation (ADKE) technique introduced Sigalotti et al. (2008) [44], the variational SPH formulation of Price (2012) [33] (referred herein as the MPM scheme) and the Godunov type SPH (GSPH) scheme of Inutsuka (2002) [12]. The tests investigate the accuracy of the inviscid discretizations, shock capturing ability and the particle settling behavior. The schemes are found to produce nearly identical results for the 1D shock tube problems with the MPM and GSPH schemes being the most robust. The ADKE scheme requires parameter values which must be tuned to the problem at hand. We propose an addition of an artiﬁcial heating term to the GSPH scheme to eliminate unphysical spikes in the thermal energy at the contact discontinuity. The resulting modiﬁcation is simple and can be readily incorporated in existing codes. In two dimensions, the differences between the schemes is more evident with the quality of results determined by the particle distribution. In particular, the ADKE scheme shows signs of particle clumping and irregular motion for the 2D strong shock and Sedov point explosion tests. The noise in particle data is linked with the particle distribution which remains regular for the Hamiltonian formulations (MPM and GSPH) and becomes irregular for the ADKE scheme. In the interest of reproducibility, we make available our implementation of the algorithms and test problems discussed in this work.},
	language = {en},
	urldate = {2022-11-02},
	journal = {Journal of Computational Physics},
	author = {Puri, Kunal and Ramachandran, Prabhu},
	month = jan,
	year = {2014},
	pages = {308--333},
	file = {puri2014.pdf:C\:\\Reference\\MPM_and_SPH\\puri2014.pdf:application/pdf},
}

@article{ma_comparison_2009,
	title = {Comparison study of {MPM} and {SPH} in modeling hypervelocity impact problems},
	volume = {36},
	issn = {0734743X},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0734743X08001255},
	doi = {10.1016/j.ijimpeng.2008.07.001},
	abstract = {Due to the high nonlinearities and extreme large deformation, the hypervelocity impact simulation is a challenging task for numerical methods. Meshfree particle methods, such as the smoothed particle hydrodynamics (SPH) and material point method (MPM), are promising for the simulation of hypervelocity impact problems. In this paper, the material point method is applied to the simulation of hypervelocity impact problems, and a three-dimensional MPM computer code, MPM3D, is developed. The Johnson–Cook material model and Mie–Gru¨ neisen equation of state are implemented. Furthermore, the basic formulations of MPM are compared with SPH, and their performances are compared numerically by using MPM3D and LS-DYNA SPH module.},
	language = {en},
	number = {2},
	urldate = {2022-11-02},
	journal = {International Journal of Impact Engineering},
	author = {Ma, S. and Zhang, X. and Qiu, X.M.},
	month = feb,
	year = {2009},
	pages = {272--282},
	file = {ma2009.pdf:C\:\\Reference\\MPM_and_SPH\\ma2009.pdf:application/pdf},
}

@article{du_tpdp-mpm-based_2022,
	title = {A {TPDP}-{MPM}-based approach to understanding the evolution mechanism of landslide-induced disaster chain},
	volume = {14},
	issn = {16747755},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S1674775522000762},
	doi = {10.1016/j.jrmge.2022.03.004},
	abstract = {With complex topographic and hydrological characteristics, the landslide-induced surge disaster chain readily develops in mountainous and gorge areas, posing a huge challenge for infrastructure construction. This landslide-induced surge disaster chain involves a complex ﬂuid-solid coupling between the landslide mass and a water body and exhibits complex energy conversion and dissipation characteristics, which is challenging to deal with using traditional ﬁnite element analysis. In this study, the energy evolution characteristics in the whole process of the disaster chain were ﬁrst investigated, and the momentum-conservation equations for different stages were established. Then, the two-phase doublepoint material point method (TPDP-MPM) was used to model the landslide-induced surge disaster chain, and an experiment involving block-induced surge was modeled and simulated to validate this method. Finally, three generalized models were established for the landslide-induced surge process in a U-shaped valley, including subaerial, partly submerged, and submarine scenarios. The interaction mechanism between the landslide mass and the water body in the disaster chain was revealed by deﬁning the system energy conversion ratio and the mechanism of evolution of the disaster chain from the perspective of energy. The results help further evaluate the secondary disasters, given the submerged position of the landslide mass.},
	language = {en},
	number = {4},
	urldate = {2022-11-02},
	journal = {Journal of Rock Mechanics and Geotechnical Engineering},
	author = {Du, Wenjie and Sheng, Qian and Fu, Xiaodong and Chen, Jian and Zhou, Yongqiang},
	month = aug,
	year = {2022},
	pages = {1200--1209},
	file = {A TPDP-MPM-ba...isaster chain_Wenjie Du.pdf:C\:\\Reference\\MPM_and_SPH\\A TPDP-MPM-ba...isaster chain_Wenjie Du.pdf:application/pdf},
}

@article{rumsey_users_nodate,
	title = {A {User}'s {Guide} to {CGNS}},
	language = {en},
	author = {Rumsey, Christopher L and Poirier, Diane M A and Bush, Robert H},
	keywords = {⛔ No DOI found},
	file = {Rumsey 等 - A User's Guide to CGNS.pdf:C\:\\Zotero\\storage\\GS654KKH\\Rumsey 等 - A User's Guide to CGNS.pdf:application/pdf},
}

@article{bassi_high-order_1997-1,
	title = {High-{Order} {Accurate} {Discontinuous} {Finite} {Element} {Solution} of the {2D} {Euler} {Equations}},
	volume = {138},
	issn = {00219991},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0021999197954541},
	doi = {10.1006/jcph.1997.5454},
	language = {en},
	number = {2},
	urldate = {2023-05-10},
	journal = {Journal of Computational Physics},
	author = {Bassi, F. and Rebay, S.},
	month = dec,
	year = {1997},
	pages = {251--285},
	file = {Bassi 和 Rebay - 1997 - High-Order Accurate Discontinuous Finite Element S.pdf:C\:\\Zotero\\storage\\DVA2PAKB\\Bassi 和 Rebay - 1997 - High-Order Accurate Discontinuous Finite Element S.pdf:application/pdf},
}

@misc{noauthor_introduction_nodate,
	title = {Introduction · {Modern} {CMake}},
	url = {https://modern-cmake-cn.github.io/Modern-CMake-zh_CN/},
	urldate = {2023-05-10},
}

@inproceedings{cockburn_development_2000,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computational} {Science} and {Engineering}},
	title = {The {Development} of {Discontinuous} {Galerkin} {Methods}},
	isbn = {978-3-642-59721-3},
	doi = {10.1007/978-3-642-59721-3_1},
	abstract = {In this paper, we present an overview of the evolution of the discontinuous Galerkin methods since their introduction in 1973 by Reed and Hill, in the framework of neutron transport, until their most recent developments. We show how these methods made their way into the main stream of computational fluid dynamics and how they are quickly finding use in a wide variety of applications. We review the theoretical and algorithmic aspects of these methods as well as their applications to equations including nonlinear conservation laws, the compressible Navier-Stokes equations, and Hamilton-Jacobi-like equations.},
	language = {en},
	booktitle = {Discontinuous {Galerkin} {Methods}},
	publisher = {Springer},
	author = {Cockburn, Bernardo and Karniadakis, George E. and Shu, Chi-Wang},
	editor = {Cockburn, Bernardo and Karniadakis, George E. and Shu, Chi-Wang},
	year = {2000},
	keywords = {Discontinuous Galerkin, Discontinuous Galerkin Method, Hyperbolic Problem, Numerical Flux, Posteriori Error},
	pages = {3--50},
	file = {全文:C\:\\Zotero\\storage\\YAWGAJP2\\Cockburn 等 - 2000 - The Development of Discontinuous Galerkin Methods.pdf:application/pdf},
}

@article{gao_high-order_2022,
	title = {A {High}-{Order} {Discontinuous} {Galerkin} {Method} for {Solving} {Preconditioned} {Euler} {Equations}},
	volume = {12},
	issn = {2076-3417},
	url = {https://www.mdpi.com/2076-3417/12/14/7040},
	doi = {10.3390/app12147040},
	abstract = {A high-order discontinuous Galerkin (DG) method is presented for solving the preconditioned Euler equations with an explicit or implicit time marching scheme. A detailed description is given of a practical implementation of a precondition matrix of the type of Weiss and Smith and of the DG spatial discretization scheme employed, with particular emphasis on the artiﬁcial viscosity-based shock capturing techniques. The curved boundary treatment is proposed through adopting a NURBS surface equipped with a radial basis function interpolation to propagate the boundary displacement to the interior of the mesh. The resulting methods are veriﬁed by simulating ﬂows over two-dimensional airfoils, such as symmetric NACA0012 or asymmetric RAE2822, and over three-dimensional bodies, such as an academic hemispherical headform or aerodynamic ONERA M6 wing. Numerical results show that the present method functions for both transonic and nearly incompressible ﬂow simulations, and the proposed treatment of curved boundaries, play an important role in improving the accuracy of the obtained solutions, which are in good agreement with available experimental data or other numerical solutions reported in literature.},
	language = {en},
	number = {14},
	urldate = {2023-05-11},
	journal = {Applied Sciences},
	author = {Gao, Huanqin and Zhang, Jiale and Chen, Hongquan and Xu, Shengguan and Jia, Xuesong},
	month = jul,
	year = {2022},
	pages = {7040},
	file = {Gao 等 - 2022 - A High-Order Discontinuous Galerkin Method for Sol.pdf:C\:\\Zotero\\storage\\WRLSIHIX\\Gao 等 - 2022 - A High-Order Discontinuous Galerkin Method for Sol.pdf:application/pdf},
}

@misc{noauthor_discontinuous_2023,
	title = {Discontinuous {Galerkin} method},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Discontinuous_Galerkin_method&oldid=1144342423},
	abstract = {In applied mathematics, discontinuous Galerkin methods (DG methods) form a class of numerical methods for solving differential equations. They combine features of the finite element and the finite volume framework and have been successfully applied to hyperbolic, elliptic, parabolic and mixed form problems arising from a wide range of applications. DG methods have in particular received considerable interest for problems with a dominant first-order part, e.g. in electrodynamics, fluid mechanics and plasma physics.
Discontinuous Galerkin methods were first proposed and analyzed in the early 1970s as a technique to numerically solve partial differential equations. In 1973 Reed and Hill introduced a DG method to solve the hyperbolic neutron transport equation.
The origin of the DG method for elliptic problems cannot be traced back to a single publication as features such as jump penalization in the modern sense were developed gradually. However, among the early influential contributors were Babuška, J.-L. Lions, Joachim Nitsche and Miloš Zlámal. DG methods for elliptic problems were already developed in a paper by Garth Baker in the setting of 4th order equations in 1977. A more complete account of the historical development and an introduction to DG methods for elliptic problems is given in a publication by Arnold, Brezzi, Cockburn and Marini. A number of research directions and challenges on DG methods are collected in the proceedings volume edited by Cockburn, Karniadakis and Shu.},
	language = {en},
	urldate = {2023-05-11},
	journal = {Wikipedia},
	month = mar,
	year = {2023},
	note = {Page Version ID: 1144342423},
	file = {Snapshot:C\:\\Zotero\\storage\\RREZWEVY\\Discontinuous_Galerkin_method.html:text/html},
}

@incollection{cangiani_introduction_2017,
	address = {Cham},
	series = {{SpringerBriefs} in {Mathematics}},
	title = {Introduction to {Discontinuous} {Galerkin} {Methods}},
	isbn = {978-3-319-67673-9},
	url = {https://doi.org/10.1007/978-3-319-67673-9_2},
	abstract = {The purpose of this chapter is to present an overview of the construction of discontinuous Galerkin finite element methods for a general class of second-order partial differential equations with nonnegative characteristic form. This class of equations includes second-order elliptic and parabolic partial differential equations, ultra-parabolic equations, first-order hyperbolic problems, the Kolmogorov-Fokker-Planck equations of Brownian motion, the equations of boundary layer theory in hydrodynamics, and various other degenerate equations.},
	language = {en},
	urldate = {2023-05-16},
	booktitle = {hp-{Version} {Discontinuous} {Galerkin} {Methods} on {Polygonal} and {Polyhedral} {Meshes}},
	publisher = {Springer International Publishing},
	author = {Cangiani, Andrea and Dong, Zhaonan and Georgoulis, Emmanuil H. and Houston, Paul},
	editor = {Cangiani, Andrea and Dong, Zhaonan and Georgoulis, Emmanuil H. and Houston, Paul},
	year = {2017},
	doi = {10.1007/978-3-319-67673-9_2},
	keywords = {Discontinuous Galerkin Finite Element Method, ﬁrst-order Hyperbolic Problems, First-order Transport Equation, Nonnegative Characteristic Form, Ultra Parabolic Equations},
	pages = {11--22},
	file = {978-3-319-67673-9.pdf:C\:\\Zotero\\storage\\Z5TQVFMR\\978-3-319-67673-9.pdf:application/pdf;Full Text PDF:C\:\\Zotero\\storage\\FVX6CVIZ\\Cangiani 等 - 2017 - Introduction to Discontinuous Galerkin Methods.pdf:application/pdf},
}

@misc{noauthor_0galerkindg_nodate,
	title = {研0纪实：一维间断{Galerkin方法}({DG})},
	url = {https://zhuanlan.zhihu.com/p/439772431},
	abstract = {本部分考虑简单的一维问题： u\_t+f(u)\_x=0 。实际求解的算例为 u\_t+u\_x=0,u(x,0)={\textbackslash}sin x,0{\textbackslash}le x{\textbackslash}le 2{\textbackslash}pi 并采用周期边界条件(我导说用什么边界条件也是一个专门的研究方向，所以现在用什么边界条件不重要，能把算…},
	language = {zh},
	urldate = {2023-05-16},
	journal = {知乎专栏},
	file = {Snapshot:C\:\\Zotero\\storage\\JNJMYK7B\\439772431.html:text/html},
}

@misc{_cmake_2023,
	title = {{CMake} 保姆级教程（上）},
	url = {https://subingwen.cn/cmake/CMake-primer/index.html},
	abstract = {1. CMake概述CMake 是一个项目构建工具，并且是跨平台的。关于项目构建我们所熟知的还有Makefile（通过 make 命令进行项目的构建），大多是IDE软件都集成了make，比如：VS 的 nmake、linux 下的 GNU make、Qt 的 qmake等，如果自己动手写 makefile，会发现，makefile 通常依赖于当前的编译平台，而且编写 makefile 的工作量比较},
	language = {zh-CN},
	urldate = {2023-05-16},
	journal = {爱编程的大丙},
	author = {苏丙榅},
	month = mar,
	year = {2023},
	file = {Snapshot:C\:\\Zotero\\storage\\HN27SA8I\\CMake-primer.html:text/html},
}

@misc{havre_freecad_2023,
	title = {A {FreeCAD} manual},
	url = {https://github.com/yorikvanhavre/FreeCAD-manual},
	abstract = {An experiment at reorganizing the contents of the FreeCAD wiki in an easier, friendlier book-like manner. The manual is now hosted on the FreeCAD wiki},
	urldate = {2023-05-29},
	author = {Havre, Yorik van},
	month = may,
	year = {2023},
	note = {original-date: 2015-12-05T20:15:33Z},
	keywords = {freecad},
	file = {a-freecad-manual.pdf:C\:\\Zotero\\storage\\AJPCZYEQ\\a-freecad-manual.pdf:application/pdf},
}

@misc{noauthor_fast_nodate,
	title = {Fast {Fluid} {Dynamics}},
	url = {https://people.sc.fsu.edu/~lb13f/projects/finite_difference/fast_fluid_dynamics.php},
	urldate = {2023-06-13},
	file = {Fast Fluid Dynamics:C\:\\Zotero\\storage\\UDQW62R2\\fast_fluid_dynamics.html:text/html},
}

@article{ghia_high-re_1982,
	title = {High-{Re} {Solutions} for {Incompressible} {Flow} {Using} the {Navier}-{Stokes} {Equations} and a {Multigrid} {Method}},
	volume = {48},
	issn = {0021-9991},
	url = {https://ui.adsabs.harvard.edu/abs/1982JCoPh..48..387G},
	doi = {10.1016/0021-9991(82)90058-4},
	abstract = {The vorticity-stream function formulation of the two-dimensional incompressible Navier-Stokes equations is used to study the effectiveness of the coupled strongly implicit multigrid (CSI-MG) method in the determination of high-Re fine-mesh flow solutions. The driven flow in a square cavity is used as the model problem. Solutions are obtained for configurations with Reynolds number as high as 10,000 and meshes consisting of as many as 257 × 257 points. For Re = 1000, the (129 × 129) grid solution required 1.5 minutes of CPU time on the AMDAHL 470 V/6 computer. Because of the appearance of one or more secondary vortices in the flow field, uniform mesh refinement was preferred to the use of one-dimensional grid-clustering coordinate transformations.},
	urldate = {2023-06-13},
	journal = {Journal of Computational Physics},
	author = {Ghia, U. and Ghia, K. N. and Shin, C. T.},
	month = dec,
	year = {1982},
	note = {ADS Bibcode: 1982JCoPh..48..387G},
	keywords = {Algorithms, Computational Fluid Dynamics, Computational Grids, Computer Programs, Fluid Mechanics and Heat Transfer, High Reynolds Number, Incompressible Flow, Navier-Stokes Equation, Partial Differential Equations, Velocity Distribution},
	pages = {387--411},
	file = {Ghia 等 - 1982 - High-Re Solutions for Incompressible Flow Using th.pdf:C\:\\Zotero\\storage\\XTVS2PTT\\Ghia 等 - 1982 - High-Re Solutions for Incompressible Flow Using th.pdf:application/pdf},
}

@misc{pedapudi_fast_2023,
	title = {Fast {Fluid} {Dynamics}},
	copyright = {GPL-3.0},
	url = {https://github.com/Balavarun5/fast_fluid_dynamics},
	urldate = {2023-06-16},
	author = {Pedapudi, Balavarun},
	month = jun,
	year = {2023},
	note = {original-date: 2018-03-23T20:40:53Z},
	file = {Pedapudi - 2023 - Fast Fluid Dynamics.pdf:C\:\\Zotero\\storage\\PKFRVLUH\\Pedapudi - 2023 - Fast Fluid Dynamics.pdf:application/pdf},
}

@article{zuo_advanced_2010,
	title = {Advanced simulations of air distributions in buildings},
	url = {https://docs.lib.purdue.edu/dissertations/AAI3413824},
	journal = {Theses and Dissertations Available from ProQuest},
	author = {Zuo, Wangda},
	month = jan,
	year = {2010},
	pages = {1--190},
	file = {"Advanced simulations of air distributions in buildings" by Wangda Zuo:C\:\\Zotero\\storage\\5EGBAHLD\\AAI3413824.html:text/html;out.pdf:C\:\\Zotero\\storage\\DADZIBZ4\\out.pdf:application/pdf},
}

@article{stam_stable_2001,
	title = {Stable {Fluids}},
	volume = {1999},
	doi = {10.1145/311535.311548},
	abstract = {Building animation tools for fluid-like motions is an important and challenging problem with many applications in computer graphics. The use of physics-based models for fluid flow can greatly assist in creating such tools. Physical models, unlike key frame or procedural based techniques, permit an animator to almost effortlessly create interesting, swirling fluid-like behaviors. Also, the interaction of flows with objects and virtual forces is handled elegantly. Until recently, it was believed that physical fluid models were too expensive to allow real-time interaction. This was largely due to the fact that previous models used unstable schemes to solve the physical equations governing a fluid. In this paper, for the first time, we propose an unconditionally stable model which still produces complex fluid-like flows. As well, our method is very easy to implement. The stability of our model allows us to take larger time steps and therefore achieve faster simulations. We have used our model in conjuction with advecting solid textures to create many fluid-like animations interactively in two- and three-dimensions.},
	journal = {ACM SIGGRAPH 99},
	author = {Stam, Jos},
	month = nov,
	year = {2001},
	file = {Full Text PDF:C\:\\Zotero\\storage\\IS6WUI5T\\Stam - 2001 - Stable Fluids.pdf:application/pdf},
}

@misc{noauthor_chapter_nodate,
	title = {Chapter 38. {Fast} {Fluid} {Dynamics} {Simulation} on the {GPU}},
	url = {https://developer.nvidia.com/gpugems/gpugems/part-vi-beyond-triangles/chapter-38-fast-fluid-dynamics-simulation-gpu},
	abstract = {Chapter 38. Fast Fluid Dynamics Simulation on the GPU Mark J. Harris University of North Carolina at Chapel Hill This chapter describes a method for fast, stable fluid simulation that runs entirely on the GPU. It introduces fluid dynamics and the associated mathematics, and it describes in detail the techniques to perform the simulation on the GPU. After reading this chapter, you should have a basic understanding of fluid dynamics and know how to simulate fluids using the GPU. The source code accompanying this book demonstrates the techniques described in this chapter. 38.1 Introduction Fluids are everywhere: water passing between riverbanks, smoke curling from a glowing cigarette, steam rushing from a teapot, water vapor forming into clouds, and paint being mixed in a can. Underlying all of them is the flow of fluids. All are phenomena that we would like to portray realistically in interactive graphics applications. Figure 38-1 shows examples of fluids simulated using the source code provided with this book. Figure 38-1 Colored "Dye" Carried by a Swirling Fluid Fluid simulation is a useful building block that is the basis for simulating a variety of natural phenomena. Because of the large amount of parallelism in graphics hardware, the simulation we describe runs significantly faster on the GPU than on the CPU. Using an NVIDIA GeForce FX, we have achieved a speedup of up to six times over an equivalent CPU simulation. 38.1.1 Our Goal Our goal is to assist you in learning a powerful tool, not just to teach you a new trick. Fluid dynamics is such a useful component of more complex simulations that treating it as a black box would be a mistake. Without understanding the basic physics and mathematics of fluids, using and extending the algorithms we present would be very difficult. For this reason, we did not skimp on the mathematics here. As a result, this chapter contains many potentially daunting equations. Wherever possible, we provide clear explanations and draw connections between the math and its implementation. 38.1.2 Our Assumptions The reader is expected to have at least a college-level calculus background, including a basic grasp of differential equations. An understanding of vector calculus principles is helpful, but not required (we will review what we need). Also, experience with finite difference approximations of derivatives is useful. If you have ever implemented any sort of physical simulation, such as projectile motion or rigid body dynamics, many of the concepts we use will be familiar. 38.1.3 Our Approach The techniques we describe are based on the "stable fluids" method of Stam 1999. However, while Stam's simulations used a CPU implementation, we choose to implement ours on graphics hardware because GPUs are well suited to the type of computations required by fluid simulation. The simulation we describe is performed on a grid of cells. Programmable GPUs are optimized for performing computations on pixels, which we can consider to be a grid of cells. GPUs achieve high performance through parallelism: they are capable of processing multiple vertices and pixels simultaneously. They are also optimized to perform multiple texture lookups per cycle. Because our simulation grids are stored in textures, this speed and parallelism is just what we need. This chapter cannot teach you everything about fluid dynamics. The scope of the simulation concepts that we can cover here is necessarily limited. We restrict ourselves to simulation of a continuous volume of fluid on a two-dimensional rectangular domain. Also, we do not simulate free surface boundaries between fluids, such as the interface between sloshing water and air. There are many extensions to these basic techniques. We mention a few of these at the end of the chapter, and we provide pointers to further reading about them. We use consistent mathematical notation throughout the chapter. In equations, italics are used for variables that represent scalar quantities, such as pressure, p. Boldface is used to represent vector quantities, such as velocity, u. All vectors in this chapter are assumed to be two-dimensional. Section 38.2 provides a mathematical background, including a discussion of the equations that govern fluid flow and a review of basic vector calculus concepts and notation. It then discusses the approach to solving the equations. Section 38.3 describes implementation of the fluid simulation on the GPU. Section 38.4 describes some applications of the simulation, Section 38.5 presents extensions, and Section 38.6 concludes the chapter. 38.2 Mathematical Background To simulate the behavior of a fluid, we must have a mathematical representation of the state of the fluid at any given time. The most important quantity to represent is the velocity of the fluid, because velocity determines how the fluid moves itself and the things that are in it. The fluid's velocity varies in both time and space, so we represent it as a vector field. A vector field is a mapping of a vector-valued function onto a parameterized space, such as a Cartesian grid. (Other spatial parameterizations are possible, but for purposes of this chapter we assume a two-dimensional Cartesian grid.) The velocity vector field of our fluid is defined such that for every position x = (x, y), there is an associated velocity at time t, u(x, t) = (u(x, t), v(x, t), w(x, t)), as shown in Figure 38-2. Figure 38-2 The Fluid Velocity Grid The key to fluid simulation is to take steps in time and, at each time step, correctly determine the current velocity field. We can do this by solving a set of equations that describes the evolution of the velocity field over time, under a variety of forces. Once we have the velocity field, we can do interesting things with it, such as using it to move objects, smoke densities, and other quantities that can be displayed in our application. 38.2.1 The Navier-Stokes Equations for Incompressible Flow In physics it's common to make simplifying assumptions when modeling complex phenomena. Fluid simulation is no exception. We assume an incompressible, homogeneous fluid. A fluid is incompressible if the volume of any subregion of the fluid is constant over time. A fluid is homogeneous if its density, , is constant in space. The combination of incompressibility and homogeneity means that density is constant in both time and space. These assumptions are common in fluid dynamics, and they do not decrease the applicability of the resulting mathematics to the simulation of real fluids, such as water and air. We simulate fluid dynamics on a regular Cartesian grid with spatial coordinates x = (x, y) and time variable t. The fluid is represented by its velocity field u(x, t), as described earlier, and a scalar pressure field p(x, t). These fields vary in both space and time. If the velocity and pressure are known for the initial time t = 0, then the state of the fluid over time can be described by the Navier-Stokes equations for incompressible flow: Equation 1 Equation 2 where is the (constant) fluid density, is the kinematic viscosity, and F = (fx , fy ) represents any external forces that act on the fluid. Notice that Equation 1 is actually two equations, because u is a vector quantity: Thus, we have three unknowns (u, v, and p) and three equations. The Navier-Stokes equations may initially seem daunting, but like many complex concepts, we can better understand them by breaking them into simple pieces. Don't worry if the individual mathematical operations in the equations don't make sense yet. First, we will try to understand the different factors influencing the fluid flow. The four terms on the right-hand side of Equation 1 are accelerations. We'll look at them each in turn. 38.2.2 Terms in the Navier-Stokes Equations Advection The velocity of a fluid causes the fluid to transport objects, densities, and other quantities along with the flow. Imagine squirting dye into a moving fluid. The dye is transported, or advected, along the fluid's velocity field. In fact, the velocity of a fluid carries itself along just as it carries the dye. The first term on the right-hand side of Equation 1 represents this self-advection of the velocity field and is called the advection term. Pressure Because the molecules of a fluid can move around each other, they tend to "squish" and "slosh." When force is applied to a fluid, it does not instantly propagate through the entire volume. Instead, the molecules close to the force push on those farther away, and pressure builds up. Because pressure is force per unit area, any pressure in the fluid naturally leads to acceleration. (Think of Newton's second law, F = m a.) The second term, called the pressure term, represents this acceleration. Diffusion From experience with real fluids, you know that some fluids are "thicker" than others. For example, molasses and maple syrup flow slowly, but rubbing alcohol flows quickly. We say that thick fluids have a high viscosity. Viscosity is a measure of how resistive a fluid is to flow. This resistance results in diffusion of the momentum (and therefore velocity), so we call the third term the diffusion term. External Forces The fourth term encapsulates acceleration due to external forces applied to the fluid. These forces may be either local forces or body forces. Local forces are applied to a specific region of the fluid—for example, the force of a fan blowing air. Body forces, such as the force of gravity, apply evenly to the entire fluid. We will return to the Navier-Stokes equations after a quick review of vector calculus. For a detailed derivation and more details, we recommend Chorin and Marsden 1993 and Griebel et al. 1998. 38.2.3 A Brief Review of Vector Calculus Equations 1 and 2 contain three different uses of the symbol (often pronounced "del"), which is also known as the nabla operator. The three applications of nabla are the gradient, the divergence, and the Laplacian operators, as shown in Table 38-1. The subscripts i and j used in the expressions in the table refer to discrete locations on a Cartesian grid, and dx and y are the grid spacing in the x and y dimensions, respectively (see Figure 38-2). Table 38-1. Vector Calculus Operators Used in Fluid Simulation The gradient of a scalar field is a vector of partial derivatives of the scalar field. Divergence, which appears in Equation 2, has an important physical significance. It is the rate at which "density" exits a given region of space. In the Navier-Stokes equations, it is applied to the velocity of the flow, and it measures the net change in velocity across a surface surrounding a small piece of the fluid. Equation 2, the continuity equation, enforces the incompressibility assumption by ensuring that the fluid always has zero divergence. The dot product in the divergence operator results in a sum of partial derivatives (rather than a vector, as with the gradient operator). This means that the divergence operator can be applied only to a vector field, such as the velocity, u = (u, v). Notice that the gradient of a scalar field is a vector field, and the divergence of a vector field is a scalar field. If the divergence operator is applied to the result of the gradient operator, the result is the Laplacian operator · = 2. If the grid cells are square (that is, if dx = y, which we assume for the remainder of this chapter), the Laplacian simplifies to: Equation 3 The Laplacian operator appears commonly in physics, most notably in the form of diffusion equations, such as the heat equation. Equations of the form 2 x = b are known as Poisson equations. The case where b = 0 is Laplace's equation, which is the origin of the Laplacian operator. In Equation 2, the Laplacian is applied to a vector field. This is a notational simplification: the operator is applied separately to each scalar component of the vector field. 38.2.4 Solving the Navier-Stokes Equations The Navier-Stokes equations can be solved analytically for only a few simple physical configurations. However, it is possible to use numerical integration techniques to solve them incrementally. Because we are interested in watching the evolution of the flow over time, an incremental numerical solution suits our needs. As with any algorithm, we must divide the solution of the Navier-Stokes equations into simple steps. The method we use is based on the stable fluids technique described in Stam 1999. In this section we describe the mathematics of each of these steps, and in Section 38.3 we describe their implementation using the Cg language on the GPU. First we need to transform the equations into a form that is more amenable to numerical solution. Recall that the Navier-Stokes equations are three equations that we can solve for the quantities u, v, and p. However, it is not obvious how to solve them. The following section describes a transformation that leads to a straightforward algorithm. The Helmholtz-Hodge Decomposition Basic vector calculus tells us that any vector v can be decomposed into a set of basis vector components whose sum is v. For example, we commonly represent vectors on a Cartesian grid as a pair of distances along the grid axes: v = (x, y). The same vector can be written v = x î + y , where î and are unit basis vectors aligned to the axes of the grid. In the same way that we can decompose a vector into a sum of vectors, we can also decompose a vector field into a sum of vector fields. Let D be the region in space, or in our case the plane, on which our fluid is defined. Let this region have a smooth (that is, differentiable) boundary, D, with normal direction n. We can use the following theorem, as stated in Chorin and Marsden 1993. Helmholtz-Hodge Decomposition Theorem A vector field w on D can be uniquely decomposed in the form: Equation 7 where u has zero divergence and is parallel to D; that is, u . n = 0 on D. We use the theorem without proof. For details and a proof of this theorem, refer to Section 1.3 of Chorin and Marsden 1993. This theorem states that any vector field can be decomposed into the sum of two other vector fields: a divergence-free vector field, and the gradient of a scalar field. It also says that the divergence-free field goes to zero at the boundary. It is a powerful tool, leading us to two useful realizations. First Realization Solving the Navier-Stokes equations involves three computations to update the velocity at each time step: advection, diffusion, and force application. The result is a new velocity field, w, with nonzero divergence. But the continuity equation requires that we end each time step with a divergence-free velocity. Fortunately, the Helmholtz-Hodge Decomposition Theorem tells us that the divergence of the velocity can be corrected by subtracting the gradient of the resulting pressure field: Equation 8 Second Realization The theorem also leads to a method for computing the pressure field. If we apply the divergence operator to both sides of Equation 7, we obtain: Equation 9 But since Equation 2 enforces that · u = 0, this simplifies to: Equation 10 which is a Poisson equation (see Section 38.2.3) for the pressure of the fluid, sometimes called the Poisson-pressure equation. This means that after we arrive at our divergent velocity, w, we can solve Equation 10 for p, and then use w and p to compute the new divergence-free field, u, using Equation 8. We'll return to this later. Now we need a way to compute w. To do this, let's return to our comparison of vectors and vector fields. From the definition of the dot product, we know that we can find the projection of a vector r onto a unit vector by computing the dot product of r and . The dot product is a projection operator for vectors that maps a vector r onto its component in the direction of . We can use the Helmholtz-Hodge Decomposition Theorem to define a projection operator, , that projects a vector field w onto its divergence-free component, u. If we apply to Equation 7, we get: But by the definition of , w = u = u. Therefore, (p) = 0. Now let's use these ideas to simplify the Navier-Stokes equations. First, we apply our projection operator to both sides of Equation 1: Because u is divergence-free, so is the derivative on the left-hand side, so ( u/t) = u/t. Also, (p) = 0, so the pressure term drops out. We're left with the following equation: Equation 11 The great thing about this equation is that it symbolically encapsulates our entire algorithm for simulating fluid flow. We first compute what's inside the parentheses on the right-hand side. From left to right, we compute the advection, diffusion, and force terms. Application of these three steps results in a divergent velocity field, w, to which we apply our projection operator to get a new divergence-free field, u. To do so, we solve Equation 10 for p, and then subtract the gradient of p from w, as in Equation 8. In a typical implementation, the various components are not computed and added together, as in Equation 11. Instead, the solution is found via composition of transformations on the state; in other words, each component is a step that takes a field as input, and produces a new field as output. We can define an operator that is equivalent to the solution of Equation 11 over a single time step. The operator is defined as the composition of operators for advection ( ), diffusion ( ), force application ( ), and projection ( ): Equation 12 Thus, a step of the simulation algorithm can be expressed The operators are applied right to left; first advection, followed by diffusion, force application, and projection. Note that time is omitted here for clarity, but in practice, the time step must be used in the computation of each operator. Now let's look more closely at the advection and diffusion steps, and then approach the solution of Poisson equations. Advection Advection is the process by which a fluid's velocity transports itself and other quantities in the fluid. To compute the advection of a quantity, we must update the quantity at each grid point. Because we are computing how a quantity moves along the velocity field, it helps to imagine that each grid cell is represented by a particle. A first attempt at computing the result of advection might be to update the grid as we would update a particle system. Just move the position, r, of each particle forward along the velocity field the distance it would travel in time t: You might recognize this as Euler's method; it is a simple method for explicit (or forward) integration of ordinary differential equations. (There are more accurate methods, such as the midpoint method and the Runge-Kutta methods.) There are two problems with this approach: The first is that simulations that use explicit methods for advection are unstable for large time steps, and they can "blow up" if the magnitude of u(t)t is greater than the size of a single grid cell. The second problem is specific to GPU implementation. We implement our simulation in fragment programs, which cannot change the locations of the fragments they are writing. This forward-integration method requires the ability to "move" the particles, so it cannot be implemented on current GPUs. The solution is to invert the problem and use an implicit method (Stam 1999). Rather than advecting quantities by computing where a particle moves over the current time step, we trace the trajectory of the particle from each grid cell back in time to its former position, and we copy the quantities at that position to the starting grid cell. To update a quantity q (this could be velocity, density, temperature, or any quantity carried by the fluid), we use the following equation: Equation 13 Not only can we easily implement this method on the GPU, but as Stam showed, it is stable for arbitrary time steps and velocities. Figure 38-3 depicts the advection computation at the cell marked with a double circle. Tracing the velocity field back in time leads to the green x. The four grid values nearest the green x (connected by a green square in the figure) are bilinearly interpolated, and the result is written to the starting grid cell. Figure 38-3 Computing Fluid Advection Viscous Diffusion As explained earlier, viscous fluids have a certain resistance to flow, which results in diffusion (or dissipation) of velocity. A partial differential equation for viscous diffusion is: Equation 14 As in advection, we have a choice of how to solve this equation. An obvious approach is to formulate an explicit, discrete form in order to develop a simple algorithm: In this equation, 2 is the discrete form of the Laplacian operator, Equation 3. Like the explicit Euler method for computing advection, this method is unstable for large values of dt and v. We follow Stam's lead again and use an implicit formulation of Equation 14: Equation 15 where I is the identity matrix. This formulation is stable for arbitrary time steps and viscosities. This equation is a (somewhat disguised) Poisson equation for velocity. Remember that our use of the Helmholtz-Hodge decomposition results in a Poisson equation for pressure. These equations can be solved using an iterative relaxation technique. Solution of Poisson Equations We need to solve two Poisson equations: the Poisson-pressure equation and the viscous diffusion equation. Poisson equations are common in physics and well understood. We use an iterative solution technique that starts with an approximate solution and improves it every iteration. The Poisson equation is a matrix equation of the form Ax = b, where x is the vector of values for which we are solving (p or u in our case), b is a vector of constants, and A is a matrix. In our case, A is implicitly represented in the Laplacian operator 2, so it need not be explicitly stored as a matrix. The iterative solution technique we use starts with an initial "guess" for the solution, x (0), and each step k produces an improved solution, x (k). The superscript notation indicates the iteration number. The simplest iterative technique is called Jacobi iteration. A derivation of Jacobi iteration for general matrix equations can be found in Golub and Van Loan 1996. More sophisticated methods, such as conjugate gradient and multigrid methods, converge faster, but we use Jacobi iteration because of its simplicity and easy implementation. For details and examples of more sophisticated solvers, see Bolz et al. 2003, Goodnight et al. 2003, and Krüger and Westermann 2003. Equations 10 and 15 appear different, but both can be discretized using Equation 3 and rewritten in the form: Equation 16 where and are constants. The values of x, b, , and are different for the two equations. In the Poisson-pressure equation, x represents p, b represents · w, a = -(x)2, and = 4. [1] For the viscous diffusion equation, both x and b represent u, = (x)2/t, and = 4 + . We formulate the equations this way because it lets us use the same code to solve either equation. To solve the equations, we simply run a number of iterations in which we apply Equation 16 at every grid cell, using the results of the previous iteration as input to the next (x ( k +1) becomes x ( k )). Because Jacobi iteration converges slowly, we need to execute many iterations. Fortunately, Jacobi iterations are cheap to execute on the GPU, so we can run many iterations in a very short time. Initial and Boundary Conditions Any differential equation problem defined on a finite domain requires boundary conditions in order to be well posed. The boundary conditions determine how we compute values at the edges of the simulation domain. Also, to compute the evolution of the flow over time, we must know how it started—in other words, its initial conditions. For our fluid simulation, we assume the fluid initially has zero velocity and zero pressure everywhere. Boundary conditions require a bit more discussion. During each time step, we solve equations for two quantities—velocity and pressure—and we need boundary conditions for both. Because our fluid is simulated on a rectangular grid, we assume that it is a fluid in a box and cannot flow through the sides of the box. For velocity, we use the no-slip condition, which specifies that velocity goes to zero at the boundaries. The correct solution of the Poisson-pressure equation requires pure Neumann boundary conditions: p/ n = 0. This means that at a boundary, the rate of change of pressure in the direction normal to the boundary is zero. We revisit boundary conditions at the end of Section 38.3. 38.3 Implementation Now that we understand the problem and the basics of solving it, we can move forward with the implementation. A good place to start is to lay out some pseudocode for the algorithm. The algorithm is the same every time step, so this pseudocode represents a single time step. The variables u and p hold the velocity and pressure field data. // Apply the first 3 operators in Equation 12. u = advect(u); u = diffuse(u); u = addForces(u); // Now apply the projection operator to the result. p = computePressure(u); u = subtractPressureGradient(u, p); In practice, temporary storage is needed, because most of these operations cannot be performed in place. For example, the advection step in the pseudocode is more accurately written as: uTemp = advect(u); swap(u, uTemp); This pseudocode contains no implementation-specific details. In fact, the same pseudocode describes CPU and GPU implementations equally well. Our goal is to perform all the steps on the GPU. Computation of this sort on the GPU may be unfamiliar to some readers, so we will draw some analogies between operations in a typical CPU fluid simulation and their counterparts on the GPU. 38.3.1 CPU–GPU Analogies Fundamental to any computer are its memory and processing models, so any application must consider data representation and computation. Let's touch on the differences between CPUs and GPUs with regard to both of these. Textures = Arrays Our simulation represents data on a two-dimensional grid. The natural representation for this grid on the CPU is an array. The analog of an array on the GPU is a texture. Although textures are not as flexible as arrays, their flexibility is improving as graphics hardware evolves. Textures on current GPUs support all the basic operations necessary to implement a fluid simulation. Because textures usually have three or four color channels, they provide a natural data structure for vector data types with two to four components. Alternatively, multiple scalar fields can be stored in a single texture. The most basic operation is an array (or memory) read, which is accomplished by using a texture lookup. Thus, the GPU analog of an array offset is a texture coordinate. We need at least two textures to represent the state of the fluid: one for velocity and one for pressure. In order to visualize the flow, we maintain an additional texture that contains a quantity carried by the fluid. We can think of this as "ink." Figure 38-4 shows examples of these textures, as well as an additional texture for vorticity, described in Section 38.5.1. Figure 38-4 The State Fields of a Fluid Simulation, Stored in Textures Loop Bodies = Fragment Programs A CPU implementation of the simulation performs the steps in the algorithm by looping, using a pair of nested loops to iterate over each cell in the grid. At each cell, the same computation is performed. GPUs do not have the capability to perform this inner loop over each texel in a texture. However, the fragment pipeline is designed to perform identical computations at each fragment. To the programmer, it appears as if there is a processor for each fragment, and that all fragments are updated simultaneously. In the parlance of parallel programming, this model is known as single instruction, multiple data (SIMD) computation. Thus, the GPU analog of computation inside nested loops over an array is a fragment program applied in SIMD fashion to each fragment. Feedback = Texture Update In Section 38.2.4, we described how we use Jacobi iteration to solve Poisson equations. This type of iterative method uses the result of an iteration as input for the next iteration. This feedback is common in numerical methods. In a CPU implementation, one typically does not even consider feedback, because it is trivially implemented using variables and arrays that can be both read and written. On the GPU, though, the output of fragment processors is always written to the frame buffer. Think of the frame buffer as a two-dimensional array that cannot be directly read. There are two ways to get the contents of the frame buffer into a texture that can be read: Copy to texture (CTT) copies from the frame buffer to a texture. Render to texture (RTT) uses a texture as the frame buffer so the GPU can write directly to it. CTT and RTT function equally well, but have a performance trade-off. For the sake of generality we do not assume the use of either and refer to the process of writing to a texture as a texture update. Earlier we mentioned that, in practice, each of the five steps in the algorithm updates a temporary grid and then performs a swap. RTT requires the use of two textures to implement feedback, because the results of rendering to a texture while it is bound for reading are undefined. The swap in this case is merely a swap of texture IDs. The performance cost of RTT is therefore constant. CTT, on the other hand, requires only one texture. The frame buffer acts as a temporary grid, and a swap is performed by copying the data from the frame buffer to the texture. The performance cost of this copy is proportional to the texture size. 38.3.2 Slab Operations We break down the steps of our simulation into what we call slab operations (slabop, for short). [2] Each slabop consists of processing one or more (often all) fragments in the frame buffer—usually with a fragment program active—followed by a texture update. Fragment processing is driven by rendering geometric primitives. For this application, the geometry we render is simple: just quad and line primitives. There are two types of fragments to process in any slab operation: interior fragments and boundary fragments. Our 2D grid reserves a single-cell perimeter to store and compute boundary conditions. Typically, a different computation is performed on the interior and at the boundaries. To update the interior fragments, we render a quadrilateral that covers all but a one-pixel border on the perimeter of the frame buffer. We render four line primitives to update the boundary cells. We apply separate fragment programs to interior and border fragments. See Figure 38-5. Figure 38-5 Primitives Used to Update the Interior and Boundaries of the Grid 38.3.3 Implementation in Fragment Programs Now that we know the steps of our algorithm, our data representation, and how to perform a slab operation, we can write the fragment programs that perform computations at each cell. Advection The fragment program implementation of advection shown in Listing 38-1 follows nearly exactly from Equation 13, repeated here: Equation 13 There is one slight difference. Because texture coordinates are not in the same units as our simulation domain (the texture coordinates are in the range [0, N], where N is the grid resolution), we must scale the velocity into grid space. This is reflected in Cg code with the multiplication of the local velocity by the parameter rdx, which represents the reciprocal of the grid scale x. The texture wrap mode must be set to CLAMP\_TO\_EDGE so that back-tracing outside the range [0, N] will be clamped to the boundary texels. The boundary conditions described later correctly update these texels so that this situation operates correctly. Example 38-1. Advection Fragment Program void advect(float2 coords : WPOS, // grid coordinates out float4 xNew : COLOR, // advected qty uniform float timestep, uniform float rdx, // 1 / grid scale uniform samplerRECT u, // input velocity uniform samplerRECT x) // qty to advect \{ // follow the velocity field "back in time" float2 pos = coords - timestep * rdx * f2texRECT(u, coords); // interpolate and write to the output fragment xNew = f4texRECTbilerp(x, pos); \} In this code, the parameter u is the velocity field texture, and x is the field that is to be advected. This could be the velocity or another quantity, such as dye concentration. The function f4texRECTbilerp() is a utility to perform bilinear interpolation of the four texels closest to the texture coordinates passed to it. Because current GPUs do not support automatic bilinear interpolation in floating-point textures, we must implement it with this type of code. Viscous Diffusion With the description of the Jacobi iteration technique given in Section 38.2.4, writing a Jacobi iteration fragment program is simple, as shown in Listing 38-2. Example 38-2. The Jacobi Iteration Fragment Program Used to Solve Poisson Equations void jacobi(half2 coords : WPOS, // grid coordinates out half4 xNew : COLOR, // result uniform half alpha, uniform half rBeta, // reciprocal beta uniform samplerRECT x, // x vector (Ax = b) uniform samplerRECT b) // b vector (Ax = b) \{ // left, right, bottom, and top x samples half4 xL = h4texRECT(x, coords - half2(1, 0)); half4 xR = h4texRECT(x, coords + half2(1, 0)); half4 xB = h4texRECT(x, coords - half2(0, 1)); half4 xT = h4texRECT(x, coords + half2(0, 1)); // b sample, from center half4 bC = h4texRECT(b, coords); // evaluate Jacobi iteration xNew = (xL + xR + xB + xT + alpha * bC) * rBeta; \} Notice that the rBeta parameter is the reciprocal of from Equation 16. To solve the diffusion equation, we set alpha to (x)2/t, rBeta to 1/(4 + (x)2/t), and the x and b parameters to the velocity texture. We then run a number of iterations (usually 20 to 50, but more can be used to reduce the error). Force Application The simplest step in our algorithm is computing the acceleration caused by external forces. In the demonstration application found in the accompanying materials, you can apply an impulse to the fluid by clicking and dragging with the mouse. To implement this, we draw a spot into the velocity texture at the position of the click. The color of the spot encodes the direction and magnitude of the impulse: the red channel contains the magnitude in x, and the green channel contains the magnitude in y. The spot is actually a two-dimensional Gaussian "splat." We use a fragment program to check each fragment's distance from the impulse position. Then we add the quantity c to the color: Here, F is the force computed from the direction and length of the mouse drag, is the desired impulse radius, and (x, y) and (xp , yp ) are the fragment position and impulse (click) position in window coordinates, respectively. Projection In the beginning of this section, we learned that the projection step is divided into two operations: solving the Poisson-pressure equation for p, and subtracting the gradient of p from the intermediate velocity field. This requires three fragment programs: the aforementioned Jacobi iteration program, a program to compute the divergence of the intermediate velocity field, and a program to subtract the gradient of p from the intermediate velocity field. The divergence program shown in Listing 38-3 takes the intermediate velocity field as parameter w and one-half of the reciprocal of the grid scale as parameter halfrdx, and it computes the divergence according to the finite difference formula given in Table 38-1, on page 643. The divergence is written to a temporary texture, which is then used as input to the b parameter of the Jacobi iteration program. The x parameter of the Jacobi program is set to the pressure texture, which is first cleared to all zero values (in other words, we are using zero as our initial guess for the pressure field). The alpha and rBeta parameters are set to -(x)2 and ¼, respectively. To achieve good convergence on the solution, we typically use 40 to 80 Jacobi iterations. Changing the number of Jacobi iterations will affect the accuracy of the simulation. It is not a good idea to go below 20 iterations, because the error is noticeable. Using more iterations results in more detailed vortices and more overall accuracy, but it requires more computation time. After the Jacobi iterations are finished, we bind the pressure field texture to the parameter p in the following program, which computes the gradient of p according to the definition in Table 38-1 and subtracts it from the intermediate velocity field texture in parameter w. See Listing 38-4. Example 38-3. The Divergence Fragment Program void divergence(half2 coords : WPOS, // grid coordinates out half4 div : COLOR, // divergence uniform half halfrdx, // 0.5 / gridscale uniform samplerRECT w) // vector field \{ half4 wL = h4texRECT(w, coords - half2(1, 0)); half4 wR = h4texRECT(w, coords + half2(1, 0)); half4 wB = h4texRECT(w, coords - half2(0, 1)); half4 wT = h4texRECT(w, coords + half2(0, 1)); div = halfrdx * ((wR.x - wL.x) + (wT.y - wB.y)); \} Example 38-4. The Gradient Subtraction Fragment Program void gradient(half2 coords : WPOS, // grid coordinates out half4 uNew : COLOR, // new velocity uniform half halfrdx, // 0.5 / gridscale uniform samplerRECT p, // pressure uniform samplerRECT w) // velocity \{ half pL = h1texRECT(p, coords - half2(1, 0)); half pR = h1texRECT(p, coords + half2(1, 0)); half pB = h1texRECT(p, coords - half2(0, 1)); half pT = h1texRECT(p, coords + half2(0, 1)); uNew = h4texRECT(w, coords); uNew.xy -= halfrdx * half2(pR - pL, pT - pB); \} Boundary Conditions In Section 38.2.4, we determined that our "fluid in a box" requires no-slip (zero) velocity boundary conditions and pure Neumann pressure boundary conditions. In Section 38.3.2 we learned that we can implement boundary conditions by reserving the one-pixel perimeter of our grid for storing boundary values. We update these values by drawing line primitives over the border, using a fragment program that sets the values appropriately. First we should look at how our grid discretization affects the computation of boundary conditions. The no-slip condition dictates that velocity equals zero on the boundaries, and the pure Neumann pressure condition requires the normal pressure derivative to be zero at the boundaries. The boundary is defined to lie on the edge between the boundary cell and its nearest interior cell, but grid values are defined at cell centers. Therefore, we must compute boundary values such that the average of the two cells adjacent to any edge satisfies the boundary condition. For the velocity boundary on the left side, for example, we have: Equation 17 where N is the grid resolution. In order to satisfy this equation, we must set u 0, j equal to –u 1, j . The pressure equation works out similarly. Using the forward difference approximation of the derivative, we get: Equation 18 On solving this equation for p 0, j , we see that we need to set each pressure boundary value to the value just inside the boundary. We can use a simple fragment program for both the pressure and the velocity boundaries, as shown in Listing 38-5. Example 38-5. The Boundary Condition Fragment Program void boundary(half2 coords : WPOS, // grid coordinates half2 offset : TEX1, // boundary offset out half4 bv : COLOR, // output value uniform half scale, // scale parameter uniform samplerRECT x) // state field \{ bv = scale * h4texRECT(x, coords + offset); \} Figure 38-6 demonstrates how this program works. The x parameter represents the texture (velocity or pressure field) from which we read interior values. The offset parameter contains the correct offset to the interior cells adjacent to the current boundary. The coords parameter contains the position in texture coordinates of the fragment being processed, so adding offset to it addresses a neighboring texel. At each boundary, we set offset to adjust our texture coordinates to the texel just inside the boundary. For the left boundary, we set it to (1, 0), so that it addresses the texel just to the right; for the bottom boundary, we use (0, 1); and so on. The scale parameter can be used to scale the value we copy to the boundary. For velocity boundaries, scale is set to -1, and for pressure it is set to 1, so that we correctly implement Equations 17 and 18, respectively. Figure 38-6 Boundary Conditions on an MxN Grid 38.4 Applications In this section we explore a variety of applications of the GPU simulation techniques discussed in this chapter. 38.4.1 Simulating Liquids and Gases The most direct use of the simulation techniques is to simulate a continuous volume of a liquid or gas. As it stands, the simulation represents only the velocity of the fluid, which is not very interesting. It is more interesting if we put something else in the fluid. The demonstration application does this by maintaining an additional scalar field. This field represents the concentration of dye carried by the fluid. (Because it is an RGB texture, it is really three scalar fields: one for each of three dye colors.) Quantities like this are known as passive scalars because they are only carried along by the fluid; they do not affect how it flows. If d is the concentration of dye, then the evolution of the dye field is governed by the following equation: Equation 19 To simulate how the dye is carried by the fluid, we apply the advection operator to the scalar field, just as we do for the velocity. If we also want to account for the diffusion of the dye in the fluid, we add a diffusion term: Equation 20 where is the coefficient of the diffusion of dye in water (or whatever liquid we assume the fluid is). To implement dye diffusion, we use Jacobi iteration, just as we did for viscous diffusion of velocity. Note that the demonstration application does not actually perform diffusion of the dye, because numerical error in the advection term causes it to diffuse anyway. We added another term to Equation 20, S. This term represents any sources of dye. The application implements this term by adding dye anywhere we click. 38.4.2 Buoyancy and Convection Temperature is an important factor in the flow of many fluids. Convection currents are caused by the changes in density associated with temperature changes. These currents affect our weather, our oceans and lakes, and even our coffee. To simulate these effects, we need to add buoyancy to our simulation. The simplest way to incorporate buoyancy is to add a new scalar field for temperature, T, to the simulation. We can then insert an additional buoyancy operator that adds force where the local temperature is higher than a given ambient temperature, T 0: Equation 21 In this equation, is the vertical direction and s is a constant scale factor. This force can be implemented in a simple fragment program that evaluates Equation 21 at each fragment, scales the result by the time step, and adds it to the current velocity. Smoke and Clouds We now have almost everything we need to simulate smoke. What we have presented so far is similar to the smoke simulation technique introduced by Fedkiw et al. 2001. In addition to calculating the velocity and pressure fields, a smoke simulation must maintain scalar fields for smoke density, d, and temperature, T. The smoke density is advected by the velocity field, just like the dye we described earlier. The buoyant force is modified to account for the gravitational pull on dense smoke: Equation 22 where k is a constant mass scale factor. By adding a source of smoke density and temperature (possibly representing a smokestack or the tip of a cigarette) at a given location on the grid, we simulate smoke. The paper by Fedkiw et al. describes two other differences from our basic simulation. They use a staggered grid to improve accuracy, and they add a vorticity confinement force to increase the amount of swirling motion in the smoke. Both extensions are discussed in the next section. As demonstrated in Harris et al. 2003, a more complex simulation can be used to simulate clouds on the GPU. A sequence of stills from a 2D GPU cloud simulation is shown in Figure 38-7. The cloud simulator combines fluid simulation with a thermodynamic simulation (including buoyancy), as well as a simulation of water condensation and evaporation. A 128x128 cloud simulation runs at over 80 iterations per second on an NVIDIA GeForce FX 5950 Ultra GPU. Figure 38-7 Cloud Simulation 38.5 Extensions The fluid simulation presented in this chapter is a building block that can serve as the basis for more complex simulations. There are many ways to extend this basic simulation. To get you started, we describe some useful extensions. 38.5.1 Vorticity Confinement The motion of smoke, air and other low-viscosity fluids typically contains rotational flows at a variety of scales. This rotational flow is vorticity. As Fedkiw et al. explained, numerical dissipation caused by simulation on a coarse grid damps out these interesting features (Fedkiw et al. 2001). Therefore, they used vorticity confinement to restore these fine-scale motions. Vorticity confinement works by first computing the vorticity, = x u. From the vorticity we compute a normalized vorticity vector field: Here, The vectors in this vector field point from areas of lower vorticity to areas of higher vorticity. From these vectors we compute a force that can be used to restore an approximation of the dissipated vorticity: Here is a user-controlled scale parameter. The "curl" operator, x, can be derived using the definitions of the gradient and the cross-product operator. The accompanying source code implements vorticity confinement. 38.5.2 Three Dimensions All the simulations presented in this chapter are two-dimensional. There is nothing preventing us from extending them to 3D. The equations remain essentially the same, but we must extend them to incorporate a 3D velocity, u = (u, v, w). The fragment programs must be rewritten to account for this; samples from four neighbors in two dimensions become samples from six neighbors in three dimensions. The biggest change is in how the vector and scalar fields are represented. One option is to use 3D textures. This is a problem on hardware that does not support 3D floating-point textures. In this situation, we can tile the slabs of a 3D texture in a grid stored in a 2D texture (for example, a 32x32x32 grid would tile onto a 256x128 2D texture, with eight tiles in one dimension and four in the other). This technique, called flat 3D textures, is presented in detail in Harris et al. 2003. 38.5.3 Staggered Grid In our simulation we represent velocity, pressure, and any other quantities at cell centers. This is just one way to discretize the continuous domain on which we represent our fluid. This approach is known as a collocated, or cell-centered, discretization. Another way is to use a staggered grid. In a staggered grid, we represent scalar quantities (such as pressure) at cell centers and vector quantities (such as velocity) at the boundaries between cells. Specifically, on a two-dimensional grid, we represent the horizontal velocity, u, at the right edge of each cell and the vertical velocity, v, at the top edge of each cell. The staggered grid discretization increases the accuracy of many calculations. It can also reduce numerical oscillations that may arise when forces such as buoyancy are applied on a cell-centered grid. Details of the implementation of fluid simulation on a staggered grid can be found in Griebel et al. 1998. 38.5.4 Arbitrary Boundaries So far we have assumed that our fluid exists in a rectangular box with flat, solid sides. If boundaries of arbitrary shape and location are important, you need to extend the simulation. Incorporating arbitrary boundaries requires applying the boundary conditions (discussed in Section 38.3.3) at arbitrary locations. This means that at each cell, we must determine in which direction the boundaries lie in order to compute the correct boundary values. This simulation requires more decisions to be made at each cell, leading to a slower and more complicated simulation. However, many interesting effects can be created this way, such as smoke flowing around obstacles. Moving boundaries can even be incorporated, as in Fedkiw et al. 2001. We refer you to that paper as well as Griebel et al. 1998 for implementation details. 38.5.5 Free Surface Flow Another assumption we made is that our fluid is continuous—the only boundaries we represent are the solid boundaries of the box. So we cannot simulate things like the ocean surface, where there is an interface between the water and air. This type of interface is called a free surface. Extending our simulation to incorporate a free surface requires tracking the location of the surface as it moves through cells. Methods for implementing free surface flow can be found in Griebel et al. 1998. 38.6 Conclusion The power and programmability now available in GPUs enables fast simulation of a wide variety of phenomena. Underlying many of these phenomena is the dynamics of fluid motion. After reading this chapter, you should have a fundamental understanding of the mathematics and technology you need to implement basic fluid simulations on the GPU. From these initial ideas you can experiment with your own simulation concepts and incorporate fluid simulation into graphics applications. We hope these techniques become powerful new tools in your repertoire. 38.7 References Bolz, J., I. Farmer, E. Grinspun, and P. Schröder. 2003. "Sparse Matrix Solvers on the GPU: Conjugate Gradients and Multigrid." In Proceedings of SIGGRAPH 2003. Chorin, A.J., and J.E. Marsden. 1993. A Mathematical Introduction to Fluid Mechanics. 3rd ed. Springer. Fedkiw, R., J. Stam, and H.W. Jensen. 2001. "Visual Simulation of Smoke." In Proceedings of SIGGRAPH 2001. Golub, G.H., and C.F. Van Loan. 1996. Matrix Computations. 3rd ed. The Johns Hopkins University Press. Goodnight, N., C. Woolley, G. Lewin, D. Luebke, and G. Humphreys. 2003. "A Multigrid Solver for Boundary Value Problems Using Programmable Graphics Hardware." In Proceedings of the SIGGRAPH/Eurographics Workshop on Graphics Hardware 2003. Griebel, M., T. Dornseifer, and T. Neunhoeffer. 1998. Numerical Simulation in Fluid Dynamics: A Practical Introduction. Society for Industrial and Applied Mathematics. Harris, M.J., W.V. Baxter, T. Scheuermann, and A. Lastra. 2003. "Simulation of Cloud Dynamics on Graphics Hardware." In Proceedings of the SIGGRAPH/Eurographics Workshop on Graphics Hardware 2003. Krüger, J., and R. Westermann. 2003. "Linear Algebra Operators for GPU Implementation of Numerical Algorithms." In Proceedings of SIGGRAPH 2003. Stam, J. 1999. "Stable Fluids." In Proceedings of SIGGRAPH 1999. Copyright Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in this book, and Addison-Wesley was aware of a trademark claim, the designations have been printed with initial capital letters or in all capitals. The authors and publisher have taken care in the preparation of this book, but make no expressed or implied warranty of any kind and assume no responsibility for errors or omissions. No liability is assumed for incidental or consequential damages in connection with or arising out of the use of the information or programs contained herein. The publisher offers discounts on this book when ordered in quantity for bulk purchases and special sales. For more information, please contact:       U.S. Corporate and Government Sales       (800) 382-3419       corpsales@pearsontechgroup.com For sales outside of the U.S., please contact:       International Sales       international@pearsoned.com Visit Addison-Wesley on the Web: www.awprofessional.com Library of Congress Control Number: 2004100582 GeForce™ and NVIDIA Quadro® are trademarks or registered trademarks of NVIDIA Corporation. RenderMan® is a registered trademark of Pixar Animation Studios. "Shadow Map Antialiasing" © 2003 NVIDIA Corporation and Pixar Animation Studios. "Cinematic Lighting" © 2003 Pixar Animation Studios. Dawn images © 2002 NVIDIA Corporation. Vulcan images © 2003 NVIDIA Corporation. Copyright © 2004 by NVIDIA Corporation. All rights reserved. No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in any form, or by any means, electronic, mechanical, photocopying, recording, or otherwise, without the prior consent of the publisher. Printed in the United States of America. Published simultaneously in Canada. For information on obtaining permission for use of material from this work, please submit a written request to:       Pearson Education, Inc.       Rights and Contracts Department       One Lake Street       Upper Saddle River, NJ 07458 Text printed on recycled and acid-free paper. 5 6 7 8 9 10 QWT 09 08 07 5th Printing September 2007},
	language = {en-US},
	urldate = {2023-06-18},
	journal = {NVIDIA Developer},
	file = {Snapshot:C\:\\Zotero\\storage\\NIXD4TTF\\chapter-38-fast-fluid-dynamics-simulation-gpu.html:text/html},
}

@misc{noauthor_fast_nodate-1,
	title = {Fast {Fluid} {Dynamics} {Model} {\textbar} {Sustainable} {Buildings} and {Societies} {Laboratory} {\textbar} {University} of {Colorado} {Boulder}},
	url = {https://www.colorado.edu/lab/sbs/fastfluiddynamics},
	language = {en},
	urldate = {2023-06-18},
	file = {Snapshot:C\:\\Zotero\\storage\\YHK9NLWV\\fastfluiddynamics.html:text/html},
}

@misc{takahashi_stablefluids_2023,
	title = {{StableFluids}},
	url = {https://github.com/keijiro/StableFluids},
	abstract = {A straightforward GPU implementation of Jos Stam's "Stable Fluids" on Unity.},
	urldate = {2023-06-18},
	author = {Takahashi, Keijiro},
	month = jun,
	year = {2023},
	note = {original-date: 2018-06-27T05:22:34Z},
	keywords = {compute, fluid-dynamics, gpu, shader, unity, unity3d},
}

@inproceedings{stam_real-time_2003,
	title = {Real-{Time} {Fluid} {Dynamics} for {Games}},
	url = {https://www.semanticscholar.org/paper/Real-Time-Fluid-Dynamics-for-Games-Stam/5127ac7b58e36ffd13ca4437fc123c6a018dc436?p2df},
	abstract = {In this paper we present a simple and rapid implementation of a fluid dynamics solver for game engines. Our tools can greatly enhance games by providing realistic fluid-like effects such as swirling smoke past a moving character. The potential applications are endless. Our algorithms are based on the physical equations of fluid flow, namely the Navier-Stokes equations. These equations are notoriously hard to solve when strict physical accuracy is of prime importance. Our solvers on the other hand are geared towards visual quality. Our emphasis is on stability and speed, which means that our simulations can be advanced with arbitrary time steps. We also demonstrate that our solvers are easy to code by providing a complete C code implementation in this paper. Our algorithms run in real-time for reasonable grid sizes in both two and three dimensions on standard PC hardware, as demonstrated during the presentation of this paper at the conference.},
	urldate = {2023-06-18},
	author = {Stam, J.},
	year = {2003},
	file = {Stam - Real-Time Fluid Dynamics for Games.pdf:C\:\\Zotero\\storage\\JFP5T678\\Stam - Real-Time Fluid Dynamics for Games.pdf:application/pdf},
}

@article{stam_real-time_nodate,
	title = {Real-{Time} {Fluid} {Dynamics} for {Games}},
	abstract = {In this paper we present a simple and rapid implementation of a fluid dynamics solver for game engines. Our tools can greatly enhance games by providing realistic fluid-like effects such as swirling smoke past a moving character. The potential applications are endless. Our algorithms are based on the physical equations of fluid flow, namely the Navier-Stokes equations. These equations are notoriously hard to solve when strict physical accuracy is of prime importance. Our solvers on the other hand are geared towards visual quality. Our emphasis is on stability and speed, which means that our simulations can be advanced with arbitrary time steps. We also demonstrate that our solvers are easy to code by providing a complete C code implementation in this paper. Our algorithms run in real-time for reasonable grid sizes in both two and three dimensions on standard PC hardware, as demonstrated during the presentation of this paper at the conference.},
	language = {en},
	author = {Stam, Jos},
	file = {Stam - Real-Time Fluid Dynamics for Games.pdf:C\:\\Zotero\\storage\\RIKTMBLZ\\Stam - Real-Time Fluid Dynamics for Games.pdf:application/pdf},
}

@article{stam_real-time_nodate-1,
	title = {Real-{Time} {Fluid} {Dynamics} for {Games}},
	abstract = {In this paper we present a simple and rapid implementation of a fluid dynamics solver for game engines. Our tools can greatly enhance games by providing realistic fluid-like effects such as swirling smoke past a moving character. The potential applications are endless. Our algorithms are based on the physical equations of fluid flow, namely the Navier-Stokes equations. These equations are notoriously hard to solve when strict physical accuracy is of prime importance. Our solvers on the other hand are geared towards visual quality. Our emphasis is on stability and speed, which means that our simulations can be advanced with arbitrary time steps. We also demonstrate that our solvers are easy to code by providing a complete C code implementation in this paper. Our algorithms run in real-time for reasonable grid sizes in both two and three dimensions on standard PC hardware, as demonstrated during the presentation of this paper at the conference.},
	language = {en},
	author = {Stam, Jos},
}

@article{stam_real-time_nodate-2,
	title = {Real-{Time} {Fluid} {Dynamics} for {Games}},
	abstract = {In this paper we present a simple and rapid implementation of a fluid dynamics solver for game engines. Our tools can greatly enhance games by providing realistic fluid-like effects such as swirling smoke past a moving character. The potential applications are endless. Our algorithms are based on the physical equations of fluid flow, namely the Navier-Stokes equations. These equations are notoriously hard to solve when strict physical accuracy is of prime importance. Our solvers on the other hand are geared towards visual quality. Our emphasis is on stability and speed, which means that our simulations can be advanced with arbitrary time steps. We also demonstrate that our solvers are easy to code by providing a complete C code implementation in this paper. Our algorithms run in real-time for reasonable grid sizes in both two and three dimensions on standard PC hardware, as demonstrated during the presentation of this paper at the conference.},
	language = {en},
	author = {Stam, Jos},
	file = {Stam - Real-Time Fluid Dynamics for Games.pdf:C\:\\Zotero\\storage\\8HEY7S9C\\Stam - Real-Time Fluid Dynamics for Games.pdf:application/pdf},
}

@article{han_open_2021,
	title = {An open source fast fluid dynamics model for data center thermal management},
	volume = {230},
	issn = {03787788},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0378778820333855},
	doi = {10.1016/j.enbuild.2020.110599},
	abstract = {Although computational fluid dynamics (CFD) has been widely adopted to improve data center thermal management, the high computational demand limits its applications, such as multivariate optimal design and operation. Fast fluid dynamics (FFD), which has been applied for fast airflow simulation, shows great potential. However, few research applied FFD for optimal design and operation of data center thermal management. This research improves the FFD model for data centers and conducts a comprehensive evaluation and demonstration. First, the FFD model is improved by solving the advection and diffusion equations together using an upwind scheme instead of a semi-Lagrangian advection solver in the conventional FFD. Second, new features for data centers are added, such as a pressure correction method to simulate plenum airflow and dynamic boundary conditions for IT racks. The new FFD model is first validated with two indoor environment cases and the results show that the new FFD model has slightly better overall prediction accuracy and faster speed compared to conventional FFD. It is also observed that both FFD models achieve acceptable accuracy, except for a few localized disparities with experimental data, which might be due to simplified handling of turbulence viscosity near the boundaries. Furthermore, validation with a real data center case shows that the FFD model achieves a similar level of accuracy as CFD when compared to the experimental measurements with some level of uncertainties. It is then demonstrated for data center optimal design and operation, which saves 53.4-58.8\% of annual energy while still meeting the thermal requirements. With a much faster speed and comparable accuracy compared to CFD, the FFD model parallelized on a graphics processing unit is promising for practical model-based data center early design and operation.},
	language = {en},
	urldate = {2023-06-18},
	journal = {Energy and Buildings},
	author = {Han, Xu and Tian, Wei and VanGilder, Jim and Zuo, Wangda and Faulkner, Cary},
	month = jan,
	year = {2021},
	pages = {110599},
	file = {Han 等 - 2021 - An open source fast fluid dynamics model for data .pdf:C\:\\Zotero\\storage\\TIFMA7HM\\Han 等 - 2021 - An open source fast fluid dynamics model for data .pdf:application/pdf},
}

@article{zuo_coupling_2016,
	title = {Coupling indoor airflow, {HVAC}, control and building envelope heat transfer in the {Modelica} \textit{{Buildings}} library},
	volume = {9},
	issn = {1940-1493, 1940-1507},
	url = {http://www.tandfonline.com/doi/full/10.1080/19401493.2015.1062557},
	doi = {10.1080/19401493.2015.1062557},
	language = {en},
	number = {4},
	urldate = {2023-06-18},
	journal = {Journal of Building Performance Simulation},
	author = {Zuo, Wangda and Wetter, Michael and Tian, Wei and Li, Dan and Jin, Mingang and Chen, Qingyan},
	month = jul,
	year = {2016},
	pages = {366--381},
	file = {Zuo 等 - 2016 - Coupling indoor airflow, HVAC, control and buildin.pdf:C\:\\Zotero\\storage\\ER58QFZ7\\Zuo 等 - 2016 - Coupling indoor airflow, HVAC, control and buildin.pdf:application/pdf},
}

@article{jin_simulating_2013,
	title = {Simulating {Natural} {Ventilation} in and {Around} {Buildings} by {Fast} {Fluid} {Dynamics}},
	volume = {64},
	issn = {1040-7782, 1521-0634},
	url = {http://www.tandfonline.com/doi/abs/10.1080/10407782.2013.784131},
	doi = {10.1080/10407782.2013.784131},
	abstract = {Natural ventilation is a sustainable technology that can provide a well-built environment and also save energy. The application of natural ventilation to buildings requires a careful approach in the early design phase, and fast, simple design tools are greatly needed. Fast fluid dynamics (FFD) can provide useful airflow information at a speed much faster than CFD so that it is a potential design tool for natural ventilation. This study thus validated FFD with test cases representing different types of natural ventilation. The results showed that FFD was capable of predicting the main air flow feature and ventilation rate with reasonable accuracy for wind-driven or buoyancy-driven natural ventilation. FFD simulation can reflect the influence of wind direction and surrounding buildings on natural ventilation.},
	language = {en},
	number = {4},
	urldate = {2023-06-18},
	journal = {Numerical Heat Transfer, Part A: Applications},
	author = {Jin, Mingang and Zuo, Wangda and Chen, Qingyan},
	month = aug,
	year = {2013},
	pages = {273--289},
	file = {Jin 等 - 2013 - Simulating Natural Ventilation in and Around Build.pdf:C\:\\Zotero\\storage\\7WHGFI8X\\Jin 等 - 2013 - Simulating Natural Ventilation in and Around Build.pdf:application/pdf},
}

@article{tian_systematic_2017,
	title = {A systematic evaluation of accelerating indoor airflow simulations using cross-platform parallel computing},
	volume = {10},
	issn = {1940-1493, 1940-1507},
	url = {https://www.tandfonline.com/doi/full/10.1080/19401493.2016.1212933},
	doi = {10.1080/19401493.2016.1212933},
	language = {en},
	number = {3},
	urldate = {2023-06-18},
	journal = {Journal of Building Performance Simulation},
	author = {Tian, Wei and Sevilla, Thomas Alonso and Zuo, Wangda},
	month = may,
	year = {2017},
	pages = {243--255},
	file = {Tian 等 - 2017 - A systematic evaluation of accelerating indoor air.pdf:C\:\\Zotero\\storage\\XFN2773R\\Tian 等 - 2017 - A systematic evaluation of accelerating indoor air.pdf:application/pdf},
}

@article{zuo_real-time_2009,
	title = {Real-time or faster-than-real-time simulation of airflow in buildings},
	volume = {19},
	issn = {09056947, 16000668},
	url = {https://onlinelibrary.wiley.com/doi/10.1111/j.1600-0668.2008.00559.x},
	doi = {10.1111/j.1600-0668.2008.00559.x},
	abstract = {Real time flow simulation is crucial for emergency management in buildings, such as fire and accidental or intentional release of chemical/biological agents (contaminants). The simulation results can then be used to impose proper measures to minimize casualties. The computational fluid dynamics (CFD) is accurate, but too time consuming. Nodal models are fast, but not informative. To obtain a fast and informative solution, this study proposes an intermediate approach between nodal models and CFD by introducing a Fast Fluid Dynamics (FFD) method. This investigation used the FFD methods with and without turbulence treatments to study systematically four basic flows in buildings and compared the numerical results with the corresponding CFD results and the data from the literature. The results show that, on one side, the FFD can offer much richer flow information than nodal models do, but less accurate results than CFD does. On the other side, the FFD is 50 times faster than the CFD. The results also show that the FFD with the laminar assumption has the best overall performance on both accuracy and speed. It is possible to conduct faster-than-real-time flow simulations with detailed flow information by using the FFD method.},
	language = {en},
	number = {1},
	urldate = {2023-06-18},
	journal = {Indoor Air},
	author = {Zuo, W. and Chen, Q.},
	month = feb,
	year = {2009},
	pages = {33--44},
	file = {Zuo 和 Chen - 2009 - Real-time or faster-than-real-time simulation of a.pdf:C\:\\Zotero\\storage\\BDDP7GNP\\Zuo 和 Chen - 2009 - Real-time or faster-than-real-time simulation of a.pdf:application/pdf},
}

@article{zuo_advanced_2010-1,
	title = {Advanced simulations of air distributions in buildings},
	url = {https://docs.lib.purdue.edu/dissertations/AAI3413824},
	journal = {Theses and Dissertations Available from ProQuest},
	author = {Zuo, Wangda},
	month = jan,
	year = {2010},
	pages = {1--190},
}

@article{bartels_cfl3d_nodate,
	title = {{CFL3D} {Version} 6.4—{General} {Usage} and {Aeroelastic} {Analysis}},
	language = {en},
	author = {Bartels, Robert E and Rumsey, Christopher L and Biedron, Robert T},
	keywords = {⛔ No DOI found},
	file = {Bartels 等 - CFL3D Version 6.4—General Usage and Aeroelastic An.pdf:C\:\\Zotero\\storage\\2MLZGRPI\\Bartels 等 - CFL3D Version 6.4—General Usage and Aeroelastic An.pdf:application/pdf},
}

@misc{noauthor_cfl3d_nodate,
	title = {{CFL3D} {Version} 6 {Home} {Page}},
	url = {https://nasa.github.io/CFL3D/},
	urldate = {2023-07-03},
	file = {CFL3D Version 6 Home Page:C\:\\Zotero\\storage\\TU9MZT6H\\CFL3D.html:text/html},
}

@article{noauthor_physics-assisted_2023,
	title = {Physics-assisted reduced-order modeling for identifying dominant features of transonic buffet},
	volume = {35},
	issn = {1070-6631, 1089-7666},
	url = {https://pubs.aip.org/pof/article/35/6/066124/2897574/Physics-assisted-reduced-order-modeling-for},
	doi = {10.1063/5.0152127},
	abstract = {Transonic buffet is a flow instability phenomenon that arises from the interaction between the shock wave and the separated boundary layer. This flow phenomenon is considered to be highly detrimental during flight and poses a significant risk to the structural strength and fatigue life of aircraft. Up to now, there has been a lack of an accurate, efficient, and intuitive metric to predict buffet and impose a feasible constraint on aerodynamic design. In this paper, a Physics-Assisted Variational Autoencoder is proposed to identify dominant features of transonic buffet, which combines unsupervised reduced-order modeling with additional physical information embedded via a buffet classifier. Specifically, four models with various weights adjusting the contribution of the classifier are trained so as to investigate the impact of buffet information on the latent space. Statistical results reveal that the buffet state can be determined exactly with just one latent space when a proper weight of classifier is chosen. The dominant latent space further reveals a strong relevance with the key flow features located in the boundary layers downstream of shock. Based on this identification, the displacement thickness at 80\% chordwise location is proposed as a metric for buffet prediction. This metric achieves an accuracy of 98.5\% in buffet state classification, which is more reliable than the existing separation metric used in design. The proposed method integrates the benefits of feature extraction, flow reconstruction, and buffet prediction into a unified framework, demonstrating its potential in lowdimensional representations of high-dimensional flow data and interpreting the “black box” neural network.},
	language = {en},
	number = {6},
	urldate = {2023-07-06},
	journal = {Physics of Fluids},
	month = jun,
	year = {2023},
	pages = {066124},
	file = {2023 - Physics-assisted reduced-order modeling for identi.pdf:C\:\\Zotero\\storage\\3YGPX49N\\2023 - Physics-assisted reduced-order modeling for identi.pdf:application/pdf},
}

@article{krist_cfl3d_nodate,
	title = {{CFL3D} {User}’s {Manual} ({Version} 5.0)},
	language = {en},
	author = {Krist, Sherrie L and Biedron, Robert T and Rumsey, Christopher L},
	keywords = {⛔ No DOI found},
	file = {Krist 等 - CFL3D User’s Manual (Version 5.0).pdf:C\:\\Zotero\\storage\\YLBQDTD5\\Krist 等 - CFL3D User’s Manual (Version 5.0).pdf:application/pdf},
}

@article{moxey_nektar_2020,
	title = {Nektar++: {Enhancing} the capability and application of high-fidelity spectral/ h p element methods},
	volume = {249},
	issn = {00104655},
	shorttitle = {Nektar++},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0010465519304175},
	doi = {10.1016/j.cpc.2019.107110},
	abstract = {Nektar++ is an open-source framework that provides a ﬂexible, performant and scalable platform for the development of solvers for partial diﬀerential equations using the high-order spectral/hp element method. In particular, Nektar++ aims to overcome the complex implementation challenges that are often associated with high-order methods, thereby allowing them to be more readily used in a wide range of application areas. In this paper, we present the algorithmic, implementation and application developments associated with our Nektar++ version 5.0 release. We describe some of the key software and performance developments, including our strategies on parallel I/O, on in situ processing, the use of collective operations for exploiting current and emerging hardware, and interfaces to enable multi-solver coupling. Furthermore, we provide details on a newly developed Python interface that enable more rapid on-boarding of new users unfamiliar with spectral/hp element methods, C++ and/or Nektar++. This release also incorporates a number of numerical method developments – in particular: the method of moving frames (MMF), which provides an additional approach for the simulation of equations on embedded curvilinear manifolds and domains; a means of handling spatially variable polynomial order; and a novel technique for quasi-3D simulations (which combine a 2D spectral element and 1D Fourier spectral method) to permit spatially-varying perturbations to the geometry in the homogeneous direction. Finally, we demonstrate the new application-level features provided in this release, namely: a facility for generating high-order curvilinear meshes called NekMesh; a novel new AcousticSolver for aeroacoustic problems; our development of a ‘thick’ strip model for the modelling of ﬂuid-structure interaction (FSI) problems in the context of vortex-induced vibrations (VIV). We conclude by commenting on some lessons learned and by discussing some directions for future code development and expansion.},
	language = {en},
	urldate = {2023-07-11},
	journal = {Computer Physics Communications},
	author = {Moxey, David and Cantwell, Chris D. and Bao, Yan and Cassinelli, Andrea and Castiglioni, Giacomo and Chun, Sehun and Juda, Emilia and Kazemi, Ehsan and Lackhove, Kilian and Marcon, Julian and Mengaldo, Gianmarco and Serson, Douglas and Turner, Michael and Xu, Hui and Peiró, Joaquim and Kirby, Robert M. and Sherwin, Spencer J.},
	month = apr,
	year = {2020},
	pages = {107110},
	file = {Moxey 等 - 2020 - Nektar++ Enhancing the capability and application.pdf:C\:\\Zotero\\storage\\VSHECCXX\\Moxey 等 - 2020 - Nektar++ Enhancing the capability and application.pdf:application/pdf},
}

@article{noauthor_2d_nodate,
	title = {{2D} {Gaussian} quadratures: {Triangular} example},
	language = {en},
	file = {2D Gaussian quadratures Triangular example.pdf:C\:\\Zotero\\storage\\FV4AHR7H\\2D Gaussian quadratures Triangular example.pdf:application/pdf},
}

@article{hussain_appropriate_2012,
	title = {Appropriate {Gaussian} quadrature formulae for triangles},
	language = {en},
	author = {Hussain, Farzana and Karim, M S and Ahamad, Razwan},
	year = {2012},
	file = {Hussain 等 - 2012 - Appropriate Gaussian quadrature formulae for trian.pdf:C\:\\Zotero\\storage\\EB6QI7UT\\Hussain 等 - 2012 - Appropriate Gaussian quadrature formulae for trian.pdf:application/pdf},
}

@article{noauthor_2d_nodate-1,
	title = {{2D} {Gaussian} quadratures: {Triangular} example},
	language = {en},
	file = {2D Gaussian quadratures Triangular example.pdf:C\:\\Zotero\\storage\\9BRU9JJW\\2D Gaussian quadratures Triangular example.pdf:application/pdf},
}

@book{solin_higher-order_2004,
	address = {Boca Raton, FL},
	series = {Studies in advanced mathematics},
	title = {Higher-order finite element methods},
	isbn = {978-1-58488-438-5},
	language = {en},
	publisher = {Chapman \& Hall/CRC},
	author = {Šolin, Pavel and Segeth, Karel and Doležel, Ivo},
	year = {2004},
	keywords = {Finite element method},
	file = {Šolin 等 - 2004 - Higher-order finite element methods.pdf:C\:\\Zotero\\storage\\2I5LNHEQ\\Šolin 等 - 2004 - Higher-order finite element methods.pdf:application/pdf},
}

@misc{noauthor_basics_nodate,
	title = {Basics of the {Smoothed} {Particle} {Hydrodynamics} ({SPH}) {Method}},
	url = {https://altair.com/newsroom/articles/Basics-of-the-Smoothed-Particle-Hydrodynamics-(SPH)-Method},
	language = {en},
	urldate = {2023-10-09},
	journal = {Default},
	file = {Snapshot:C\:\\Zotero\\storage\\GDRFUMRH\\Basics-of-the-Smoothed-Particle-Hydrodynamics-(SPH)-Method.html:text/html},
}

@misc{koschier_smoothed_2020,
	title = {Smoothed {Particle} {Hydrodynamics} {Techniques} for the {Physics} {Based} {Simulation} of {Fluids} and {Solids}},
	url = {https://arxiv.org/abs/2009.06944v1},
	abstract = {Graphics research on Smoothed Particle Hydrodynamics (SPH) has produced fantastic visual results that are unique across the board of research communities concerned with SPH simulations. Generally, the SPH formalism serves as a spatial discretization technique, commonly used for the numerical simulation of continuum mechanical problems such as the simulation of fluids, highly viscous materials, and deformable solids. Recent advances in the field have made it possible to efficiently simulate massive scenes with highly complex boundary geometries on a single PC [Com16b, Com16a]. Moreover, novel techniques allow to robustly handle interactions among various materials [Com18,Com17]. As of today, graphics-inspired pressure solvers, neighborhood search algorithms, boundary formulations, and other contributions often serve as core components in commercial software for animation purposes [Nex17] as well as in computer-aided engineering software [FIF16]. This tutorial covers various aspects of SPH simulations. Governing equations for mechanical phenomena and their SPH discretizations are discussed. Concepts and implementations of core components such as neighborhood search algorithms, pressure solvers, and boundary handling techniques are presented. Implementation hints for the realization of SPH solvers for fluids, elastic solids, and rigid bodies are given. The tutorial combines the introduction of theoretical concepts with the presentation of actual implementations.},
	language = {en},
	urldate = {2023-10-09},
	journal = {arXiv.org},
	author = {Koschier, Dan and Bender, Jan and Solenthaler, Barbara and Teschner, Matthias},
	month = sep,
	year = {2020},
	doi = {10.2312/egt.20191035},
	file = {全文:C\:\\Zotero\\storage\\NM92DA9I\\Koschier 等 - 2020 - Smoothed Particle Hydrodynamics Techniques for the.pdf:application/pdf;Full Text PDF:C\:\\Zotero\\storage\\I4TA3XT3\\Koschier 等 - 2020 - Smoothed Particle Hydrodynamics Techniques for the.pdf:application/pdf},
}

@article{manenti_smoothed_nodate,
	title = {A {Smoothed} {Particle} {Hydrodynamics}: {Basics} and {Applications}},
	abstract = {Starting from meshfree methods, the Smoothed Particle Hydrodynamics (SPH) is introduced as a complementary tool for numerical simulation of peculiar hydrodynamic problems: its potential advantages with respect to traditional gridbased techniques are pointed out. The governing fluid dynamic equations are recalled and their numerical discretization in the SPH approximation is illustrated. Further numerical aspects relevant to SPH are also discussed, such as solid boundaries treatment. Finally some applications of the SPH method for simulating engineering hydraulic problems are shown, involving rapidly varied free surface flows with large displacements and impacts, scouring phenomena and interaction with rigid bodies.},
	language = {en},
	author = {Manenti, Dr Sauro},
	file = {Manenti - A Smoothed Particle Hydrodynamics Basics and Appl.pdf:C\:\\Zotero\\storage\\NYCGBA4B\\Manenti - A Smoothed Particle Hydrodynamics Basics and Appl.pdf:application/pdf},
}

@article{qiu_numerical_2006,
	title = {A numerical study for the performance of the {Runge}–{Kutta} discontinuous {Galerkin} method based on different numerical fluxes},
	volume = {212},
	issn = {00219991},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0021999105003451},
	doi = {10.1016/j.jcp.2005.07.011},
	abstract = {Runge–Kutta discontinuous Galerkin (RKDG) method is a high order ﬁnite element method for solving hyperbolic conservation laws employing useful features from high resolution ﬁnite volume schemes, such as the exact or approximate Riemann solvers serving as numerical ﬂuxes, TVD Runge–Kutta time discretizations, and limiters. In most of the RKDG papers in the literature, the Lax–Friedrichs numerical ﬂux is used due to its simplicity, although there are many other numerical ﬂuxes which could also be used. In this paper, we systematically investigate the performance of the RKDG method based on diﬀerent numerical ﬂuxes, including the ﬁrst-order monotone ﬂuxes such as the Godunov ﬂux, the Engquist–Osher ﬂux, etc., and second-order TVD ﬂuxes, with the objective of obtaining better performance by choosing suitable numerical ﬂuxes. The detailed numerical study is mainly performed for the one dimensional system case, addressing the issues of CPU cost, accuracy, nonoscillatory property, and resolution of discontinuities. Numerical tests are also performed for two dimensional systems.},
	language = {en},
	number = {2},
	urldate = {2023-10-09},
	journal = {Journal of Computational Physics},
	author = {Qiu, Jianxian and Khoo, Boo Cheong and Shu, Chi-Wang},
	month = mar,
	year = {2006},
	pages = {540--565},
	file = {Qiu 等 - 2006 - A numerical study for the performance of the Runge.pdf:C\:\\Zotero\\storage\\SXDUUABM\\Qiu 等 - 2006 - A numerical study for the performance of the Runge.pdf:application/pdf},
}

@misc{noauthor_authors_nodate,
	title = {Authors},
	url = {http://sph-tutorial.physics-simulation.org/},
	abstract = {A course on Smoothed Particle Hydrodynamics (SPH)},
	language = {en-US},
	urldate = {2023-10-09},
	journal = {Smoothed Particle Hydrodynamics Techniques for the Physics Based Simulation of Fluids and Solids},
	file = {Snapshot:C\:\\Zotero\\storage\\NP8CPEU4\\sph-tutorial.physics-simulation.org.html:text/html},
}

@article{_sph_nodate-1,
	title = {{SPH数值波浪水槽的改进及应用}},
	language = {zh},
	author = {南京市西康路, 地址},
	keywords = {⛔ No DOI found},
	file = {南京市西康路 - SPH数值波浪水槽的改进及应用.pdf:C\:\\Zotero\\storage\\ZTB67FJS\\南京市西康路 - SPH数值波浪水槽的改进及应用.pdf:application/pdf},
}

@article{_sph_2022,
	title = {{SPH理论和方法在高速水动力学中的研究进展}},
	volume = {17},
	issn = {1673-3185},
	url = {https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFD&dbname=CJFDLAST2022&filename=JCZG202203002&v=},
	doi = {10.19693/j.issn.1673-3185.02758},
	abstract = {船海工程领域中的高速水动力问题及其涉及的复杂流-固耦合过程普遍具有大变形、动边界、强对流、多介质等特征，一直是研究的热点和难点。而传统的网格算法在捕捉边界或界面大变形时存在一定局限性，亟待开发新一代无网格数值模拟技术。其中，光滑粒子流体动力学（SPH）作为拉格朗日无网格粒子方法，在捕捉多相界面和流-固耦合界面时具有较高的精度和强鲁棒性。近年来，随着SPH理论及方法的不断完善，SPH在理论完备性及计算稳定性方面取得了许多新的进步和突破，在模拟高速水动力方面的优势不断凸显，开始广泛应用于船海工程问题。为此，围绕水面航行器的高速水动力、航行体的跨介质水动力、水下爆炸与结构毁伤等问题，针对SPH理论及方法在上述领域取得的研究进展进行综述，讨论现有方法面临的问题与挑战，并展望未来需要开展的研究工作，旨在为后续相关研究提供参考。},
	language = {中文;},
	number = {3},
	journal = {中国舰船研究},
	author = {钟, 诗蕴 and 孙, 鹏楠 and 吕, 鸿冠 and 彭, 玉祥 and 张, 阿漫},
	year = {2022},
	note = {2 citations(CNKI)[2023-10-13]{\textless}北大核心, CSCD{\textgreater}},
	keywords = {光滑粒子流体动力学, smoothed particle hydrodynamics, fluid-structure interaction, 高速水动力, 计算力学, 流-固耦合 high-speed hydrodynamics, computational mechanics},
	pages = {29--48},
	file = {SPH理论和方法在高速水动力学中的研究进展_钟诗蕴.pdf:C\:\\Zotero\\storage\\BUZ55CSK\\SPH理论和方法在高速水动力学中的研究进展_钟诗蕴.pdf:application/pdf},
}

@article{__2022-3,
	title = {翼型绕流的多级分辨率光滑粒子流体动力学数值模拟研究},
	volume = {40},
	issn = {1000-2758},
	url = {https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFD&dbname=CJFDLAST2022&filename=XBGD202203023&v=},
	abstract = {应用考虑流场真实黏性的多级粒子分辨率光滑粒子流体动力学(smoothed particle hydrodynamics, SPH)方法对不同雷诺数下的翼型绕流问题开展了数值模拟和验证。在SPH粒子法框架中实现拉格朗日拟序结构可视化，实现漩涡细节的重现。针对SPH模拟高雷诺数翼型绕流时出现的数值不稳定性，采用张力不稳定性控制技术和粒子位移修正技术加以克服，提高了压力与速度场的计算精度。计算结果表明：SPH方法能够实现翼型绕流问题速度场与压力场的精确计算，并进行良好的受力监测与预报。相对于传统基于欧拉涡量场的漩涡捕捉方法，SPH方法中捕捉的拉格朗日拟序结构也能有效地呈现流场漩涡特征和演化过程，说明SPH方法在模拟考虑真实黏性边界层和漩涡运动的流体动力学问题研究中具有一定的特色。此外，拍动翼型绕流的数值模拟结果还体现了SPH方法在处理带运动边界绕流问题的便利性。},
	language = {中文;},
	number = {3},
	journal = {西北工业大学学报},
	author = {黄, 晓婷 and 孙, 鹏楠 and 吕, 鸿冠 and 殷, 晓瑞 and 董, 嘉徐},
	year = {2022},
	note = {{\textless}北大核心, EI, CSCD{\textgreater}},
	keywords = {⛔ No DOI found, 多级粒子分辨率技术, 拉格朗日拟序结构, 翼型绕流 delta-plus SPH method, flow around foil, Lagrangian coherent structure, multi-resolution technology, δ{\textasciitilde}+-SPH},
	pages = {661--669},
	file = {翼型绕流的多级分辨率光滑粒子流体动力学数值模拟研究_黄晓婷.pdf:C\:\\Zotero\\storage\\W6744AB8\\翼型绕流的多级分辨率光滑粒子流体动力学数值模拟研究_黄晓婷.pdf:application/pdf},
}

@article{_sph_nodate-2,
	title = {{基于改进SPH模型的溃坝洪水演进模拟方法}},
	issn = {1001-6791},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=DNPf6DgFiJsEyQ6R2ne6xxs1EpYXzxt43JYLseezNu0OXmyaOfP5laV0UAL71nh_vpmNL-4-cQsh7MlRfSBZfezY9_xiY-ZHhmIuu7OaLRxTEItumyg0tX-TVkL6Jp1pVWP3RVLpgbo=&uniplatform=NZKPT&language=CHS},
	abstract = {溃坝洪水演进模拟的准确性是制约水库洪水预演有效性的关键。基于光滑粒子流体动力学（Smoothed Particle Hydrodynamics， SPH）方法提出了适用于溃坝洪水演进分析的数值模拟方法。通过设置溃口粒子与粒子库，基于黎曼不变量对SPH粒子状态进行修正，构建施加边界条件的改进SPH溃坝洪水演进模型，将SPH瞬时全溃整体模型转换为考虑溃口水流变化的入流边界模型，实现SPH方法与溃口计算模型的耦合。以Malpasset溃坝事件为例，检验了该模型计算溃坝洪水的精度，结果表明该模型精度相对较高，与实测值吻合较好；应用该模型模拟了某水库溃坝洪水演进预演过程，评估其对下游输水干渠及交叉建筑物排水倒虹吸的洪水冲击风险，结果表明在上游水库遭遇超标准洪水漫顶溃坝工况下，洪水演进至排水倒虹吸处的最大洪水位未超过校核洪水位。改进SPH模型精度高，可靠性强，与溃口计算模型耦合性好，可作为溃坝洪水演进的通用手段之一。},
	language = {中文},
	urldate = {2023-10-13},
	journal = {水科学进展},
	author = {李, 同春 and 贾, 玉彤 and 李, 宏恩 and 郑, 斌 and 周, 宁 and 齐, 慧君},
	keywords = {⛔ No DOI found, 溃坝洪水演进, 溃口边界 dam break flood propagation, 黎曼不变量, breach boundary, Riemann invariants, SPH},
	pages = {1--9},
	file = {Full Text PDF:C\:\\Zotero\\storage\\DKWRE89L\\李 等 - 基于改进SPH模型的溃坝洪水演进模拟方法.pdf:application/pdf},
}

@phdthesis{_sph_2022-1,
	type = {硕士},
	title = {{基于SPH方法的流体表面张力模拟及流固耦合移动固体边界处理}},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=DNPf6DgFiJt60maq8twDrn2Q4Nj8y3cg2ic8df7gEX25gc-mClMy1dMkfK74NrsNkCBch0QEHmOd01_jjDYhbZV4b6zi4zUFLwwcLbkQMSOcFRmLngNjNxXZMuPjnfPgdN3RX63ESAlgy6Gp0gwKwg==&uniplatform=NZKPT&language=CHS},
	abstract = {流体模拟作为计算机图形学的一个重要分支,被广泛用于电影和电视特效、军事模拟、动画和医学等领域;然而,仍有很多问题需要研究解决,如流体的表面张力的快速准确模拟,流固耦合中移动固体边界处理等;而模拟表面张力,快速准确识别流体表面粒子是关键的第一步。本文在查阅与分析大量相关文献的基础上,对上述问题进行了探究。本文首先介绍了自由表面粒子的识别、流体表面张力模拟、流固耦合中移动边界处理的历史背景及研究现状,然后对此开展了以下三方面的工作:一、流体自由表面粒子的识别大体可以分为体积法和几何法两大类。体积法借助流体粒子的数密度或者粒子数来识别自由表面粒子,虽然实现简单,但是存在流体内部粒子被误判为自由表面粒子,造成流体内部产生数值震荡的问题。几何法有扇形扫描方法、弧度法等,虽然比体积法精确度大大提高,但是实现复杂,计算量大。针对上述问题,本文提出一种新的自由表面粒子的两步检测方法:第一步,通过粒子数密度简单快捷地识别出可能自由表面粒子,但是存在部分流体内部粒子被误识为自由表面粒子的现象;第二步,通过改进扇形扫描方法,针对第一步被鉴定为自由表面粒子进行扇形扫描分类,由此将第一步误识为自由表面粒子的流体内部粒子剔除。与传统体积法相比,本文方法更精确,减少了流体模拟的数值震荡;与传统几何法相比,本文方法计算量减少,计算效率提高。仿真实验结果验证了本文方法的有效性。二、IIF方法是模拟流体表面张力常用的一种方法,它是一种基于粒子间相互作用力的模型;在流体内部,流体粒子受到支持域内邻居粒子在各种方向上作用力的合力为零,处于流体表面的粒子仅受到流体内部粒子的作用力而导致合力非零,由此表现出表面张力。现有的处理表面张力的粒子间相互作用力模型模拟流体表面张力存在的流体自由表面不光滑、计算效率低,模拟效果不稳定等问题。对此,本文提出一种新的流体自由表面张力模拟方法。首先根据本文提出的自由表面粒子的两步检测方法,快速准确识别流体自由表面粒子;根据本文提出的自由表面粒子的两步识别方法,快速准确识别流体自由表面粒子;构造新的粒子间作用力函数,改进了流体表面面积最小化修正项,修正了自由表面粒子的密度,避免流体自由表面附近出现模拟不稳定的现象;改善了自由表面周围流体粒子密度的计算精度,提高了模拟效率。模拟仿真结果显示,与已有模型相比,本文方法模拟的自由表面更加平滑,没有粒子飞溅等现象,模拟效率更高,也更加稳定。三、SPH方法在处理流体与移动固体耦合时,靠近固体边界的流体粒子的支持域被固体边界截断,导致流体粒子的密度不连续,从而出现部分流体粒子粘附、堆积在移动固体边界上的现象。为解决上述问题,传统流固边界处理算法将固体表面进行多层粒子采样以补充流固交界处流体粒子的支持域,但随着模拟过程中交互粒子数的增多,模拟效率随之降低。针对流体粒子粘附、堆积在移动固体边界上,传统方法模拟效率低的问题,本文提出一种新的流固边界处理算法,固体边界单层采样,减少了流固交互时的计算量,将固体边界粒子考虑进流体粒子的数值计算中,提出修正系数来修正未被采样的边界粒子对密度及力的计算的影响,改进了流体粒子的密度以及力的计算公式,保证了流固交互界面处流体粒子密度和压力梯度的连续性。仿真结果表明,本文方法在流固交界处消除了流体粒子粘附固体边界上的现象,提高了模拟效率。},
	language = {中文;},
	urldate = {2023-10-13},
	school = {合肥工业大学},
	author = {蒋, 肖蒙},
	year = {2022},
	doi = {10.27101/d.cnki.ghfgu.2022.000047},
	keywords = {流固耦合, 流体表面粒子识别, 流体表面张力, 流体模拟, 移动固体边界, Fluid simulation, Fluid surface particle identification, Fluid-solid coupling, IIF method, IIF方法 SPH method, Moving solid boundaries, SPH方法, Surface tension of fluid},
	file = {蒋 - 2022 - 基于SPH方法的流体表面张力模拟及流固耦合移动固体边界处理.pdf:C\:\\Zotero\\storage\\82BQ45ID\\蒋 - 2022 - 基于SPH方法的流体表面张力模拟及流固耦合移动固体边界处理.pdf:application/pdf},
}

@article{_sph_nodate-3,
	title = {{基于不可压缩数密度SPH的硅油填充和乳化仿真}},
	issn = {1007-5321},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=DNPf6DgFiJuJwBOkWbMrzDM9dfypbRlcg3k5Izk715QHIAix8T2e9F8xS8G91QioFMaIHE1l6IFKGM4upZkwTMxBlTg6ArJj_amc36vUODp5Z9RQDEp6-8xevn-BZE8fe0ZuhPcuW4s=&uniplatform=NZKPT&language=CHS},
	doi = {10.13190/j.jbupt.2022-262},
	abstract = {玻璃体切割联合硅油填充手术缺乏对硅油合适填充量和去除时间的量化研究，易发生各种眼部并发症而影响术后的视力恢复。对此，提出了一种基于不可压缩数密度的光滑粒子流体动力学(SPH)方法，以模拟眼球内部硅油和水两相流体的耦合交互。结合表面张力模型和局部平衡模型模拟了硅油的强表面张力和乳化扩散现象，并引入弹性模型以实现硅油和眼内液体与眼球组织的稳定耦合。实验结果表明，通过对硅油填充和乳化过程的可视化仿真，能够为医生临床诊断、手术规划和预后监测提供一种有效的计算机辅助手段，提高手术的成功率和改善预后。},
	language = {中文},
	urldate = {2023-10-13},
	journal = {北京邮电大学学报},
	author = {王, 佳敏 and 王, 笑琨 and 班, 晓娟 and 徐, 衍睿 and 黄, 厚斌},
	keywords = {多相流扩散, 多相流耦合, 计算机辅助医疗, 流体-弹性体耦合 computer-aided medicine, 物理仿真, fluid-elastomer coupling, multiphase fluid coupling, multiphase fluid diffusion, physical simulation},
	pages = {1--7},
	file = {Full Text PDF:C\:\\Zotero\\storage\\AG6P6LVS\\王 等 - 基于不可压缩数密度SPH的硅油填充和乳化仿真.pdf:application/pdf},
}

@inproceedings{_sph_2023,
	title = {{基于SPH方法的整车空调水管理研究}},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=DNPf6DgFiJs_I-6CnwPAn74vktakPYlt1Xijrc1En4UPhMe_wQETpExNyeKGpY0Q6icRGrVmwn8SOETPNxkkfQAuqTTsPHRwJ4iSzjtJAvIROMiBiguckY5fXy4OSHT0Mlv1iPT-DgpVaXjoaId8Eg==&uniplatform=NZKPT&language=CHS},
	doi = {10.26914/c.cnkihy.2023.033236},
	abstract = {当汽车行驶在暴雨等恶劣天气时,车辆外部会长时间受到水流冲刷。为避免外部水流进入布置于流水槽内的空调进气口而降低车辆性能,本文基于SPH方法优化了空调水管理的仿真模型,并结合动力学定理与孔口出流理论,从机理上分析了导致空调进水的原因,据此提出了空调水管理的优化方案,并在实车上得到验证。研究结果表明:优化后的仿真模型能够准确定位流水槽处的水流路径和格栅进水量。此外建立了空调进气口积水倒灌风险的评价模型,对排水孔面积、空调进气口高度等关键尺寸设计提供理论支撑,对整车水管理开发具有重要的工程应用价值。},
	language = {中文;},
	urldate = {2023-10-13},
	booktitle = {2023中国汽车工程学会汽车空气动力学分会学术年会论文集},
	publisher = {中国汽车工程学会汽车空气动力学分会},
	author = {李, 春雨 and 张, 富毅 and 辛, 佳磊 and 左, 辉辉},
	year = {2023},
	keywords = {SPH方法, 格栅进水量, 空调进气口, 孔口出流, 整车水管理, ⚠️ Invalid DOI},
	pages = {225--235},
	file = {Full Text PDF:C\:\\Zotero\\storage\\SY7CG68Y\\李 等 - 2023 - 基于SPH方法的整车空调水管理研究.pdf:application/pdf},
}

@article{_sph-fem-_nodate,
	title = {{基于SPH}-{FEM的落石冲击缓冲层}-钢筋混凝土板动力响应研究},
	issn = {1002-848X},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=DNPf6DgFiJvGbMCMOCEZOM-AFq2NeDQpFcHed3FABzAPoy8AxPEduNJ6JtI7D17bhQ9L6MjDOHVlr3pqNamKAa2IbAa9xinxg-97VN58B3-2tD1f0L-Z7q6zym70vg5g3y1KAUDxer4=&uniplatform=NZKPT&language=CHS},
	doi = {10.19701/j.jzjg.20230215},
	abstract = {崩塌落石防治工程中，通常采用钢筋混凝土框架与砂（碎石土）土缓冲层共同组成抗落石冲击防护结构。针对有限元模拟冲击荷载下缓冲层超大变形存在无法收敛的问题，本文建立SPH-FEM耦合的数值计算模型。首先利用ABAQUS对整个模型建立标准Lagrange有限元网格，然后利用Python脚本将土缓冲层有限元网格转换为SPH平滑粒子流，最后进行求解计算。结果表明，数值模拟与室外大型落石冲击试验结果对比，落石冲击力与钢筋混凝土板位移相对误差均在10\%以内，证明耦合算法的合理性；采用SPH-FEM耦合的数值模拟对于再现落石冲击砂土颗粒过程中的流动性比有限元更加客观真实，在小于12m/s的冲击速度下，缓冲层能够吸收85\%以上的冲击能量，有效保证钢筋混凝土板在小冲击能量下处于弹性工作状态，在大冲击能量下不发生毁灭性破坏；落石峰值冲击力与速度近似呈线性关系，峰值冲击力模拟值与Hertz理论值基本一致；数值模拟对于再现钢筋混凝土板的破坏过程与实际情况吻合度很好。SPH-FEM耦合方法在模拟大变形问题比FEM方法更科学，可为落石防护结构的设计和计算提供新的计算思路。},
	language = {中文},
	urldate = {2023-10-13},
	journal = {建筑结构},
	author = {孙, 晓虎 and 李, 浩 and 梅, 雪峰 and 李, 登峰 and 师, 郡 and 崔, 鹏 and 邵, 怡铭 and 李, 泽洲},
	keywords = {冲击荷载, 钢筋混凝土板, 缓冲层, 落石, 模型试验, cushion layer, impact load, model test, reinforced concrete slab, SPH-FEM coupling, SPH-FEM耦合 rockfall},
	pages = {1--9},
	file = {Full Text PDF:C\:\\Zotero\\storage\\3H5YS2DF\\孙 等 - 基于SPH-FEM的落石冲击缓冲层-钢筋混凝土板动力响应研究.pdf:application/pdf},
}

@article{__nodate,
	title = {基于改进光滑粒子流体动力学方法的弹塑性结构入水问题研究},
	issn = {1000-4750},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=DNPf6DgFiJv9nEzrXVba6BCzJjpjcBuqcc_bX_W9q87b_wr1fZYs5Ys0Zkh3ltltrGSCVBRSYWBUgva7nSpqDX8G8C2eZv5ane0JO0X4BhD-Kvvd14vnZ0OsD0e0NTunb9XuF7uVKCY=&uniplatform=NZKPT&language=CHS},
	abstract = {弹塑性结构入水的冲击动力响应对结构安全性设计和运动稳定性评价至关重要，但目前针对弹塑性结构入水时的弹塑性变形、气垫效应和三维效应的研究仍不足。光滑粒子流体动力学（Smoothed Particle Hydrodynamics， SPH）方法以其无网格、拉格朗日的特性在此类流固耦合模拟问题中具有独特优势。因此，本文开展了弹塑性楔形体冲击入水问题的SPH数值模拟研究。首先，基于改进的弹塑性结构流固耦合SPH模型和流固黎曼接触算法，研究了二维固-液两相弹塑性楔形体入水问题，分析了入水速度、弹性模量和屈服应力对结构受力、挠度、屈服部位分布等动力响应的影响。然后，基于加入空气模型的SPH改进方法，研究了二维气-固-液三相弹塑性楔形体入水问题，分析了气垫效应对于弹塑性楔形体响应的影响。最后，基于GPU并行技术，研究了三维弹塑性楔形体入水问题，分析了三维效应的影响。研究结果表明，相较于弹性楔形体入水，弹塑性楔形体受到的砰击力峰值有所降低，且砰击力峰值与入水速度和弹性模量之间表现出更加复杂的关系。空气垫体积与砰击力缓冲程度正相关，当入水速度小于一定值或楔形体底升角大于一定值时空气影响可忽略。三维效应能够显著降低结构砰击力，其峰值约为二维的74.9\%。},
	language = {中文},
	urldate = {2023-10-13},
	journal = {工程力学},
	author = {王, 璐 and 徐, 绯 and 杨, 扬},
	keywords = {光滑粒子流体动力学, ⛔ No DOI found, 弹塑性结构, 气-固-液耦合, 入水砰击, 三维效应 smoothed particle hydrodynamics(SPH), elastic-plastic structure, gas-solid-liquid coupling, three-dimensional effect, water entry},
	pages = {1--15},
	file = {Full Text PDF:C\:\\Zotero\\storage\\Y25HHFMC\\王 等 - 基于改进光滑粒子流体动力学方法的弹塑性结构入水问题研究.pdf:application/pdf},
}

@article{_-sph_nodate,
	title = {飞机轮胎-湿滑道面相互作用{SPH算法仿真分析}},
	issn = {1001-5965},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=DNPf6DgFiJuWSDcy1E-D4z9MeteC345mSzSHlH4Veu5nCLuNVGQGaJSE9c4L8G8ehihCNW2NiofA4SyqERU4YtDV9vMBWXC94RcaRTQ3HCwbS0LcglQGvEjhQ6PNeTsHkyW3R5cABMk=&uniplatform=NZKPT&language=CHS},
	doi = {10.13700/j.bh.1001-5965.2022.0954},
	abstract = {针对飞机在湿滑道面上的滑水问题，采用SPH算法建立了飞机轮胎-湿滑道面有限元模型，与CEL模型进行对比，凸显了SPH算法的优越性，进而分析了不同轮胎速度及水膜厚度对轮胎与湿滑道面相互作用的影响规律。结果表明，基于SPH算法模型得到的临界滑水速度与CEL模型结果相差不超过5\%；舰首波、侧向羽流等流体特征更为明显立体；SPH模型的平均运算效率较CEL模型提高38\%。进而利用SPH模型分析可得，道面支撑力随速度增加呈先平缓下降再急速下降的趋势，积水厚度为3～13 mm时，急速下降段所在速度区间为170～260 km/h，基本处于A320飞机的着陆滑跑速度范围内，应增强对飞机滑水事故风险的防范；位移阻力随着速度增加呈先增大后减小的趋势，且在轮胎达到临界滑水速度时取得最大值，进而提出利用位移阻力最大值确定临界滑水速度的方法；侧向羽流最大溅水高度随着速度增加呈先升高后降低的趋势，在接近临界滑水速度时达到最大值；舰首波最大溅水高度低于侧向羽流最大溅水高度且随着速度增加而降低，达到临界滑水速度时舰首波几近消失。两种溅水特征的最大溅水高度值均低于A320飞机发动机的最小离地高度0.680 m，不会对发动机产生影响。},
	language = {中文},
	urldate = {2023-10-13},
	journal = {北京航空航天大学学报},
	author = {蔡, 靖 and 黄, 钰岱 and 李, 琪 and 李, 岳 and 戴, 轩},
	keywords = {道面支撑力, 溅水高度 transportation engineering, 交通运输工程, 临界滑水速度, 轮胎-道面相互作用, 位移阻力, critical hydroplaning speed, displacement resistance, pavement supporting force, SPH algorithm, SPH算法, splashing height, tire-pavement interaction},
	pages = {1--13},
	file = {Full Text PDF:C\:\\Zotero\\storage\\MMKD8GPE\\蔡 等 - 飞机轮胎-湿滑道面相互作用SPH算法仿真分析.pdf:application/pdf},
}

@inproceedings{_sph_2022-2,
	title = {{基于SPH的波浪条件下航行体入水载荷特性研究}},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=DNPf6DgFiJuRRIF_a8vlirnePpve_EAsvJ1mRuVGXjGGt5086NbhUWrHcJ8LhmPTK44jl1PZuwAZac7QBFm9cloFaHFmohBrPeSrWboG8VllsZVHhP5McZxefCtAEcz7Q9iO3X5aF_d-rn0IoFB0ZQ==&uniplatform=NZKPT&language=CHS},
	doi = {10.26914/c.cnkihy.2022.068628},
	abstract = {未来海战多向深海和远海发展,研究波浪条件下航行体入水载荷特性为后期真实恶劣海况下的鱼雷入水过程提供了模型及参考数据。本文采用光滑粒子流体动力学(SPH)方法建立了三维数值水池,并分析了入水角度和波浪参数等因素对航行体入水轴向载荷的影响规律。结果表明:基于SPH方法的三维推板数值造波型和理论波形匹配,垂直入水时,波浪对航行体轨迹有明显偏转作用,且波高越大,航行体轨迹偏转越明显。航行体在不同相位时入水,改变的是航行体实际入水角,上行波节处航行体实际入水角最大,载荷峰值约为静水条件下的1.4倍。},
	language = {中文;},
	urldate = {2023-10-13},
	booktitle = {第十二届全国流体力学学术会议摘要集},
	publisher = {中国力学学会流体力学专业委员会},
	author = {李, 江昊 and 孙, 龙泉 and 马, 贵辉},
	year = {2022},
	keywords = {⚠️ Invalid DOI, 冲击载荷, 光滑粒子流体力学(SPH)方法, 流体力学学术大会, 数值造波},
	pages = {637},
	file = {Full Text PDF:C\:\\Zotero\\storage\\FBXRLK3R\\李 等 - 2022 - 基于SPH的波浪条件下航行体入水载荷特性研究.pdf:application/pdf},
}

@inproceedings{_sph_2022-3,
	title = {{基于SPH的航行体高速斜入水载荷特性研究}},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=DNPf6DgFiJt9OT5Mrw54rJ30xroSrCUWFJKyJxgw_D2TS3jnzYaVzHGLTVj_CDrpa7X4VdVDyskQRaPCnZPTnzjlLorRw7Jty8rNICDPqDoTKVSvVE2m8JjA7r6QupfxB2NNIDmEg-C7ERBYRaRJMQ==&uniplatform=NZKPT&language=CHS},
	doi = {10.26914/c.cnkihy.2022.068629},
	abstract = {航行体在高速入水过程中会受到强烈的冲击载荷,准确预报该载荷对航行体结构设计具有十分重要的意义。本文采用光滑粒子流体动力学(SPH)方法建立了三维航行体高速入水模型,与已有试验对比验证计算方法的准确性,并分析了入水角度、入水速度等因素对航行体高速入水轴向载荷的影响规律。结果表明:轴向冲击载荷峰值随入水角度增大而增大,当入水角度小于某一特定值时,会发生跳弹现象;航行体斜入水速度越大,轴向冲击载荷峰值越大,当入水速度大于某一特定值时,在入水后会发生弹道失稳。},
	language = {中文;},
	urldate = {2023-10-13},
	booktitle = {第十二届全国流体力学学术会议摘要集},
	publisher = {中国力学学会流体力学专业委员会},
	author = {李, 江昊 and 孙, 龙泉},
	year = {2022},
	keywords = {⚠️ Invalid DOI, 冲击载荷, 光滑粒子流体力学(SPH)方法, 流体力学学术大会, 高速入水},
	pages = {638},
	file = {Full Text PDF:C\:\\Zotero\\storage\\GURLXM4P\\李 和 孙 - 2022 - 基于SPH的航行体高速斜入水载荷特性研究.pdf:application/pdf},
}

@inproceedings{_sph_2022-4,
	title = {{一种高效SPH算法与陨石入海海啸数值模拟}},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=DNPf6DgFiJvs93iYXenIimKUD49z6OxwVuBkqYlt-iTv56PddggLb_64mHNbhO5Oi0JyB5fTD7ykfOikTQaA9OKsNs4quTCPYEX1AQXr_hhTkuy52QHcQ-i9UlRzH12dzBIfiR2s38srHccuh006fA==&uniplatform=NZKPT&language=CHS},
	doi = {10.26914/c.cnkihy.2022.068768},
	abstract = {距今6500万年前的白垩纪-第三纪边界,今墨西哥尤卡坦半岛(Yucatan Peninsula)的希克苏鲁伯(Chicxulub)由于小行星的浅水冲击形成了巨大的陨石坑。该案例被认为是海啸研究的一个重要案例。本文通过弗洛德数相似对原型进行了缩比,并利用三维弱可压的光滑粒子流体力学方法模拟了不同角度撞击的小行星浅水入水问题。为了减少计算量,引入了一种高效的自适应粒子细化算法以满足大规模计算的要求。本文关注海啸波的形成及其传播,并与Gisler等人的工作进行了对比。结果表明,由冲击造成的空泡尺寸可达约20.1km,产生的不对称水幕最高处可达35km。尽管由小行星冲击造成的空泡尺寸、射流高度以及海啸波初始高度与Gisler等人的结果吻合较好,但由于未考虑流体压缩性和热力学的作用导致空泡形态差距较大。这表明对于小行星入水问题,至少在空泡发展阶段流体的压缩性和热力学效应是至关重要的。},
	language = {中文;},
	urldate = {2023-10-13},
	booktitle = {第十二届全国流体力学学术会议摘要集},
	publisher = {中国力学学会流体力学专业委员会},
	author = {赵, 振希 and 刘, 桦},
	year = {2022},
	keywords = {SPH, ⚠️ Invalid DOI, 海啸波, 数值模拟, 小行星},
	pages = {777},
	file = {Full Text PDF:C\:\\Zotero\\storage\\K5JE8VIC\\赵 和 刘 - 2022 - 一种高效SPH算法与陨石入海海啸数值模拟.pdf:application/pdf},
}

@inproceedings{_pivsph-_2022,
	title = {{基于PIV实验和SPH模拟的气}-液两相圆球入水特性研究},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=DNPf6DgFiJvs93iYXenIimKUD49z6OxwVuBkqYlt-iTv56PddggLb_64mHNbhO5OCCv6aZI8QWS9G8i2JsqMQfivIhfxwR47_3ljDzeHNxm4IoP50AzrMd4lUP9KwiybghRI3ZZ1RUI53WS_jylMWg==&uniplatform=NZKPT&language=CHS},
	doi = {10.26914/c.cnkihy.2022.068317},
	abstract = {本文采用实验与数值方法研究了球体垂直入水时水相和气相的水动力特性。实验方面,通过高速摄像机多角度记录空腔演变过程,并使用粒子图像测速法(Particle Image Velocimetry)通过应用于空气和水不同类型的示踪粒子来捕捉空腔外的速度场。理论方面,提出了球体入水时速度的理论解,它为带有进水腔的球体提供了合适的阻力系数,与实验结果吻合良好。数值方面,采用光滑粒子流体动力学方法(Smoothed Particle Hydrodynamics)并应用自适应粒子加密技术来模拟圆球入水过程,该方法高效且精确地捕捉到了空腔与飞溅冠,与实验结果相互验证。},
	language = {中文;},
	urldate = {2023-10-13},
	booktitle = {第十二届全国流体力学学术会议摘要集},
	publisher = {中国力学学会流体力学专业委员会},
	author = {袁, 沁尔 and 宫, 兆新},
	year = {2022},
	keywords = {光滑粒子流体动力学, ⚠️ Invalid DOI, 空腔演化, 粒子图像测速法, 入水过程},
	pages = {326},
	file = {Full Text PDF:C\:\\Zotero\\storage\\BTYA7Y9R\\袁 和 宫 - 2022 - 基于PIV实验和SPH模拟的气-液两相圆球入水特性研究.pdf:application/pdf},
}

@inproceedings{_gpusph_2022,
	title = {{一种多GPU多分辨率多相SPH模型及其在高速入水问题中的应用}},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=DNPf6DgFiJuiDb8KOy8eit6SuLIFLKvz-TSjc_jZfqLprPWkTzgSD7ok-o2LQNpzALrjuyUn8taXT3K_wTlqQ-Mx4ezHnYb15HOVHLeycNq04htCMNjXD0BCT9anF6hP-As214MTr88Iv7P1BD-FSw==&uniplatform=NZKPT&language=CHS},
	doi = {10.26914/c.cnkihy.2022.068326},
	abstract = {作为一种拉格朗日方法,光滑粒子流体动力学(SPH)方法具有研究强非线性自由表面变形问题的潜在能力。现已被广泛应用于波浪、晃荡、结构如入水等问题的研究中。然而于其基于光滑核函数的插值方式,导致了巨大的计算成本,考虑多相问题时更甚。本文着重于应用SPH方法解决各种入水问题,从简单情况到高弗劳德数情况。为了实现这一目标,使用自适应粒子加密(Adaptive Particle Refinement,APR)方法对粒子进行局部细化,并提出了为APR设计的动态负载平衡(Dynamic Load Balance,DLB)策略,以降低计算成本并提高计算能力。最后提出了一种多GPU多分辨率多相SPH模型。为了验证该模型,首先模拟了不同密度比圆球入水的动力学响应以及入水空泡演化。然后,我们研究了圆柱体斜入水引起的空腔演化。自由表面的演变与实验照片吻合良好,并将结果与Logvinovich的理论模型进行了比较,这表明Logvinovich的模型在自由表面附近区域存在缺陷,而SPH模型工作良好。在多GPU应用中,我们首先使用2 Tesla V100模拟圆球的入水并验证了动态负载均衡的准确性。计算结果包括作用在球体上的力、空腔的演变和飞溅与实验数据吻合良好。最后,使用4 Tesla V100模拟了高速弹丸的入水过程,粒子数约为1.3亿。实验数据也验证了结果。通过使用APR和多GPU,SPH完全能够研究现实中的入水问题,而不仅仅是简单的低速二维情况。},
	language = {中文;},
	urldate = {2023-10-13},
	booktitle = {第十二届全国流体力学学术会议摘要集},
	publisher = {中国力学学会流体力学专业委员会},
	author = {赵, 振希 and 宫, 兆新 and 刘, 桦},
	year = {2022},
	keywords = {⚠️ Invalid DOI, 高性能计算, 光滑粒子流体动力学SPH, 入水, GPU},
	pages = {335},
	file = {Full Text PDF:C\:\\Zotero\\storage\\CYF6CRFJ\\赵 等 - 2022 - 一种多GPU多分辨率多相SPH模型及其在高速入水问题中的应用.pdf:application/pdf},
}
